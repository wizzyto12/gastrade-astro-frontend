// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { BrandDeleteBrandsByIdData, BrandDeleteBrandsByIdErrors, BrandDeleteBrandsByIdResponses, BrandGetBrandsByIdData, BrandGetBrandsByIdErrors, BrandGetBrandsByIdResponses, BrandGetBrandsData, BrandGetBrandsErrors, BrandGetBrandsResponses, BrandPostBrandsData, BrandPostBrandsErrors, BrandPostBrandsResponses, BrandPutBrandsByIdData, BrandPutBrandsByIdErrors, BrandPutBrandsByIdResponses, CarDeleteCarsByIdData, CarDeleteCarsByIdErrors, CarDeleteCarsByIdResponses, CarGetCarsByIdData, CarGetCarsByIdErrors, CarGetCarsByIdResponses, CarGetCarsData, CarGetCarsErrors, CarGetCarsResponses, CarPostCarsData, CarPostCarsErrors, CarPostCarsResponses, CarPutCarsByIdData, CarPutCarsByIdErrors, CarPutCarsByIdResponses, ContentTypeBuilderGetComponentsByUidData, ContentTypeBuilderGetComponentsByUidErrors, ContentTypeBuilderGetComponentsByUidResponses, ContentTypeBuilderGetComponentsData, ContentTypeBuilderGetComponentsErrors, ContentTypeBuilderGetComponentsResponses, ContentTypeBuilderGetContentTypesByUidData, ContentTypeBuilderGetContentTypesByUidErrors, ContentTypeBuilderGetContentTypesByUidResponses, ContentTypeBuilderGetContentTypesData, ContentTypeBuilderGetContentTypesErrors, ContentTypeBuilderGetContentTypesResponses, GlobalDeleteGlobalData, GlobalDeleteGlobalErrors, GlobalDeleteGlobalResponses, GlobalGetGlobalData, GlobalGetGlobalErrors, GlobalGetGlobalResponses, GlobalPutGlobalData, GlobalPutGlobalErrors, GlobalPutGlobalResponses, I18nGetLocalesData, I18nGetLocalesErrors, I18nGetLocalesResponses, InstallationDeleteInstallationsByIdData, InstallationDeleteInstallationsByIdErrors, InstallationDeleteInstallationsByIdResponses, InstallationGetInstallationsByIdData, InstallationGetInstallationsByIdErrors, InstallationGetInstallationsByIdResponses, InstallationGetInstallationsData, InstallationGetInstallationsErrors, InstallationGetInstallationsResponses, InstallationPostInstallationsData, InstallationPostInstallationsErrors, InstallationPostInstallationsResponses, InstallationPutInstallationsByIdData, InstallationPutInstallationsByIdErrors, InstallationPutInstallationsByIdResponses, LpgBrandDeleteLpgBrandsByIdData, LpgBrandDeleteLpgBrandsByIdErrors, LpgBrandDeleteLpgBrandsByIdResponses, LpgBrandGetLpgBrandsByIdData, LpgBrandGetLpgBrandsByIdErrors, LpgBrandGetLpgBrandsByIdResponses, LpgBrandGetLpgBrandsData, LpgBrandGetLpgBrandsErrors, LpgBrandGetLpgBrandsResponses, LpgBrandPostLpgBrandsData, LpgBrandPostLpgBrandsErrors, LpgBrandPostLpgBrandsResponses, LpgBrandPutLpgBrandsByIdData, LpgBrandPutLpgBrandsByIdErrors, LpgBrandPutLpgBrandsByIdResponses, LpgEcuDeleteLpgEcusByIdData, LpgEcuDeleteLpgEcusByIdErrors, LpgEcuDeleteLpgEcusByIdResponses, LpgEcuGetLpgEcusByIdData, LpgEcuGetLpgEcusByIdErrors, LpgEcuGetLpgEcusByIdResponses, LpgEcuGetLpgEcusData, LpgEcuGetLpgEcusErrors, LpgEcuGetLpgEcusResponses, LpgEcuPostLpgEcusData, LpgEcuPostLpgEcusErrors, LpgEcuPostLpgEcusResponses, LpgEcuPutLpgEcusByIdData, LpgEcuPutLpgEcusByIdErrors, LpgEcuPutLpgEcusByIdResponses, LpgInjectorDeleteLpgInjectorsByIdData, LpgInjectorDeleteLpgInjectorsByIdErrors, LpgInjectorDeleteLpgInjectorsByIdResponses, LpgInjectorGetLpgInjectorsByIdData, LpgInjectorGetLpgInjectorsByIdErrors, LpgInjectorGetLpgInjectorsByIdResponses, LpgInjectorGetLpgInjectorsData, LpgInjectorGetLpgInjectorsErrors, LpgInjectorGetLpgInjectorsResponses, LpgInjectorPostLpgInjectorsData, LpgInjectorPostLpgInjectorsErrors, LpgInjectorPostLpgInjectorsResponses, LpgInjectorPutLpgInjectorsByIdData, LpgInjectorPutLpgInjectorsByIdErrors, LpgInjectorPutLpgInjectorsByIdResponses, LpgReducerDeleteLpgReducersByIdData, LpgReducerDeleteLpgReducersByIdErrors, LpgReducerDeleteLpgReducersByIdResponses, LpgReducerGetLpgReducersByIdData, LpgReducerGetLpgReducersByIdErrors, LpgReducerGetLpgReducersByIdResponses, LpgReducerGetLpgReducersData, LpgReducerGetLpgReducersErrors, LpgReducerGetLpgReducersResponses, LpgReducerPostLpgReducersData, LpgReducerPostLpgReducersErrors, LpgReducerPostLpgReducersResponses, LpgReducerPutLpgReducersByIdData, LpgReducerPutLpgReducersByIdErrors, LpgReducerPutLpgReducersByIdResponses, LpgTankDeleteLpgTanksByIdData, LpgTankDeleteLpgTanksByIdErrors, LpgTankDeleteLpgTanksByIdResponses, LpgTankGetLpgTanksByIdData, LpgTankGetLpgTanksByIdErrors, LpgTankGetLpgTanksByIdResponses, LpgTankGetLpgTanksData, LpgTankGetLpgTanksErrors, LpgTankGetLpgTanksResponses, LpgTankPostLpgTanksData, LpgTankPostLpgTanksErrors, LpgTankPostLpgTanksResponses, LpgTankPutLpgTanksByIdData, LpgTankPutLpgTanksByIdErrors, LpgTankPutLpgTanksByIdResponses, ModelDeleteModelsByIdData, ModelDeleteModelsByIdErrors, ModelDeleteModelsByIdResponses, ModelGetModelsByIdData, ModelGetModelsByIdErrors, ModelGetModelsByIdResponses, ModelGetModelsData, ModelGetModelsErrors, ModelGetModelsResponses, ModelPostModelsData, ModelPostModelsErrors, ModelPostModelsResponses, ModelPutModelsByIdData, ModelPutModelsByIdErrors, ModelPutModelsByIdResponses, UploadDeleteFilesByIdData, UploadDeleteFilesByIdErrors, UploadDeleteFilesByIdResponses, UploadGetFilesByIdData, UploadGetFilesByIdErrors, UploadGetFilesByIdResponses, UploadGetFilesData, UploadGetFilesErrors, UploadGetFilesResponses, UploadPostData, UploadPostErrors, UploadPostResponses, UsersPermissionsDeleteRolesByRoleData, UsersPermissionsDeleteRolesByRoleErrors, UsersPermissionsDeleteRolesByRoleResponses, UsersPermissionsDeleteUsersByIdData, UsersPermissionsDeleteUsersByIdErrors, UsersPermissionsDeleteUsersByIdResponses, UsersPermissionsGetAuthByProviderCallbackData, UsersPermissionsGetAuthByProviderCallbackErrors, UsersPermissionsGetAuthByProviderCallbackResponses, UsersPermissionsGetAuthEmailConfirmationData, UsersPermissionsGetAuthEmailConfirmationErrors, UsersPermissionsGetConnectData, UsersPermissionsGetConnectErrors, UsersPermissionsGetPermissionsData, UsersPermissionsGetPermissionsErrors, UsersPermissionsGetPermissionsResponses, UsersPermissionsGetRolesByIdData, UsersPermissionsGetRolesByIdErrors, UsersPermissionsGetRolesByIdResponses, UsersPermissionsGetRolesData, UsersPermissionsGetRolesErrors, UsersPermissionsGetRolesResponses, UsersPermissionsGetUsersByIdData, UsersPermissionsGetUsersByIdErrors, UsersPermissionsGetUsersByIdResponses, UsersPermissionsGetUsersCountData, UsersPermissionsGetUsersCountErrors, UsersPermissionsGetUsersCountResponses, UsersPermissionsGetUsersData, UsersPermissionsGetUsersErrors, UsersPermissionsGetUsersMeData, UsersPermissionsGetUsersMeErrors, UsersPermissionsGetUsersMeResponses, UsersPermissionsGetUsersResponses, UsersPermissionsPostAuthChangePasswordData, UsersPermissionsPostAuthChangePasswordErrors, UsersPermissionsPostAuthChangePasswordResponses, UsersPermissionsPostAuthForgotPasswordData, UsersPermissionsPostAuthForgotPasswordErrors, UsersPermissionsPostAuthForgotPasswordResponses, UsersPermissionsPostAuthLocalData, UsersPermissionsPostAuthLocalErrors, UsersPermissionsPostAuthLocalRegisterData, UsersPermissionsPostAuthLocalRegisterErrors, UsersPermissionsPostAuthLocalRegisterResponses, UsersPermissionsPostAuthLocalResponses, UsersPermissionsPostAuthLogoutData, UsersPermissionsPostAuthLogoutErrors, UsersPermissionsPostAuthRefreshData, UsersPermissionsPostAuthRefreshErrors, UsersPermissionsPostAuthResetPasswordData, UsersPermissionsPostAuthResetPasswordErrors, UsersPermissionsPostAuthResetPasswordResponses, UsersPermissionsPostAuthSendEmailConfirmationData, UsersPermissionsPostAuthSendEmailConfirmationErrors, UsersPermissionsPostAuthSendEmailConfirmationResponses, UsersPermissionsPostRolesData, UsersPermissionsPostRolesErrors, UsersPermissionsPostRolesResponses, UsersPermissionsPostUsersData, UsersPermissionsPostUsersErrors, UsersPermissionsPostUsersResponses, UsersPermissionsPutRolesByRoleData, UsersPermissionsPutRolesByRoleErrors, UsersPermissionsPutRolesByRoleResponses, UsersPermissionsPutUsersByIdData, UsersPermissionsPutUsersByIdErrors, UsersPermissionsPutUsersByIdResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const brandGetBrands = <ThrowOnError extends boolean = false>(options?: Options<BrandGetBrandsData, ThrowOnError>) => {
    return (options?.client ?? client).get<BrandGetBrandsResponses, BrandGetBrandsErrors, ThrowOnError>({
        url: '/brands',
        ...options
    });
};

export const brandPostBrands = <ThrowOnError extends boolean = false>(options?: Options<BrandPostBrandsData, ThrowOnError>) => {
    return (options?.client ?? client).post<BrandPostBrandsResponses, BrandPostBrandsErrors, ThrowOnError>({
        url: '/brands',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const brandDeleteBrandsById = <ThrowOnError extends boolean = false>(options: Options<BrandDeleteBrandsByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<BrandDeleteBrandsByIdResponses, BrandDeleteBrandsByIdErrors, ThrowOnError>({
        url: '/brands/{id}',
        ...options
    });
};

export const brandGetBrandsById = <ThrowOnError extends boolean = false>(options: Options<BrandGetBrandsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<BrandGetBrandsByIdResponses, BrandGetBrandsByIdErrors, ThrowOnError>({
        url: '/brands/{id}',
        ...options
    });
};

export const brandPutBrandsById = <ThrowOnError extends boolean = false>(options: Options<BrandPutBrandsByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<BrandPutBrandsByIdResponses, BrandPutBrandsByIdErrors, ThrowOnError>({
        url: '/brands/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const carGetCars = <ThrowOnError extends boolean = false>(options?: Options<CarGetCarsData, ThrowOnError>) => {
    return (options?.client ?? client).get<CarGetCarsResponses, CarGetCarsErrors, ThrowOnError>({
        url: '/cars',
        ...options
    });
};

export const carPostCars = <ThrowOnError extends boolean = false>(options?: Options<CarPostCarsData, ThrowOnError>) => {
    return (options?.client ?? client).post<CarPostCarsResponses, CarPostCarsErrors, ThrowOnError>({
        url: '/cars',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const carDeleteCarsById = <ThrowOnError extends boolean = false>(options: Options<CarDeleteCarsByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<CarDeleteCarsByIdResponses, CarDeleteCarsByIdErrors, ThrowOnError>({
        url: '/cars/{id}',
        ...options
    });
};

export const carGetCarsById = <ThrowOnError extends boolean = false>(options: Options<CarGetCarsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<CarGetCarsByIdResponses, CarGetCarsByIdErrors, ThrowOnError>({
        url: '/cars/{id}',
        ...options
    });
};

export const carPutCarsById = <ThrowOnError extends boolean = false>(options: Options<CarPutCarsByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<CarPutCarsByIdResponses, CarPutCarsByIdErrors, ThrowOnError>({
        url: '/cars/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const globalDeleteGlobal = <ThrowOnError extends boolean = false>(options?: Options<GlobalDeleteGlobalData, ThrowOnError>) => {
    return (options?.client ?? client).delete<GlobalDeleteGlobalResponses, GlobalDeleteGlobalErrors, ThrowOnError>({
        url: '/global',
        ...options
    });
};

export const globalGetGlobal = <ThrowOnError extends boolean = false>(options?: Options<GlobalGetGlobalData, ThrowOnError>) => {
    return (options?.client ?? client).get<GlobalGetGlobalResponses, GlobalGetGlobalErrors, ThrowOnError>({
        url: '/global',
        ...options
    });
};

export const globalPutGlobal = <ThrowOnError extends boolean = false>(options?: Options<GlobalPutGlobalData, ThrowOnError>) => {
    return (options?.client ?? client).put<GlobalPutGlobalResponses, GlobalPutGlobalErrors, ThrowOnError>({
        url: '/global',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const installationGetInstallations = <ThrowOnError extends boolean = false>(options?: Options<InstallationGetInstallationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<InstallationGetInstallationsResponses, InstallationGetInstallationsErrors, ThrowOnError>({
        url: '/installations',
        ...options
    });
};

export const installationPostInstallations = <ThrowOnError extends boolean = false>(options?: Options<InstallationPostInstallationsData, ThrowOnError>) => {
    return (options?.client ?? client).post<InstallationPostInstallationsResponses, InstallationPostInstallationsErrors, ThrowOnError>({
        url: '/installations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const installationDeleteInstallationsById = <ThrowOnError extends boolean = false>(options: Options<InstallationDeleteInstallationsByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<InstallationDeleteInstallationsByIdResponses, InstallationDeleteInstallationsByIdErrors, ThrowOnError>({
        url: '/installations/{id}',
        ...options
    });
};

export const installationGetInstallationsById = <ThrowOnError extends boolean = false>(options: Options<InstallationGetInstallationsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<InstallationGetInstallationsByIdResponses, InstallationGetInstallationsByIdErrors, ThrowOnError>({
        url: '/installations/{id}',
        ...options
    });
};

export const installationPutInstallationsById = <ThrowOnError extends boolean = false>(options: Options<InstallationPutInstallationsByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<InstallationPutInstallationsByIdResponses, InstallationPutInstallationsByIdErrors, ThrowOnError>({
        url: '/installations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const lpgBrandGetLpgBrands = <ThrowOnError extends boolean = false>(options?: Options<LpgBrandGetLpgBrandsData, ThrowOnError>) => {
    return (options?.client ?? client).get<LpgBrandGetLpgBrandsResponses, LpgBrandGetLpgBrandsErrors, ThrowOnError>({
        url: '/lpg-brands',
        ...options
    });
};

export const lpgBrandPostLpgBrands = <ThrowOnError extends boolean = false>(options?: Options<LpgBrandPostLpgBrandsData, ThrowOnError>) => {
    return (options?.client ?? client).post<LpgBrandPostLpgBrandsResponses, LpgBrandPostLpgBrandsErrors, ThrowOnError>({
        url: '/lpg-brands',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const lpgBrandDeleteLpgBrandsById = <ThrowOnError extends boolean = false>(options: Options<LpgBrandDeleteLpgBrandsByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<LpgBrandDeleteLpgBrandsByIdResponses, LpgBrandDeleteLpgBrandsByIdErrors, ThrowOnError>({
        url: '/lpg-brands/{id}',
        ...options
    });
};

export const lpgBrandGetLpgBrandsById = <ThrowOnError extends boolean = false>(options: Options<LpgBrandGetLpgBrandsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<LpgBrandGetLpgBrandsByIdResponses, LpgBrandGetLpgBrandsByIdErrors, ThrowOnError>({
        url: '/lpg-brands/{id}',
        ...options
    });
};

export const lpgBrandPutLpgBrandsById = <ThrowOnError extends boolean = false>(options: Options<LpgBrandPutLpgBrandsByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<LpgBrandPutLpgBrandsByIdResponses, LpgBrandPutLpgBrandsByIdErrors, ThrowOnError>({
        url: '/lpg-brands/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const lpgEcuGetLpgEcus = <ThrowOnError extends boolean = false>(options?: Options<LpgEcuGetLpgEcusData, ThrowOnError>) => {
    return (options?.client ?? client).get<LpgEcuGetLpgEcusResponses, LpgEcuGetLpgEcusErrors, ThrowOnError>({
        url: '/lpg-ecus',
        ...options
    });
};

export const lpgEcuPostLpgEcus = <ThrowOnError extends boolean = false>(options?: Options<LpgEcuPostLpgEcusData, ThrowOnError>) => {
    return (options?.client ?? client).post<LpgEcuPostLpgEcusResponses, LpgEcuPostLpgEcusErrors, ThrowOnError>({
        url: '/lpg-ecus',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const lpgEcuDeleteLpgEcusById = <ThrowOnError extends boolean = false>(options: Options<LpgEcuDeleteLpgEcusByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<LpgEcuDeleteLpgEcusByIdResponses, LpgEcuDeleteLpgEcusByIdErrors, ThrowOnError>({
        url: '/lpg-ecus/{id}',
        ...options
    });
};

export const lpgEcuGetLpgEcusById = <ThrowOnError extends boolean = false>(options: Options<LpgEcuGetLpgEcusByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<LpgEcuGetLpgEcusByIdResponses, LpgEcuGetLpgEcusByIdErrors, ThrowOnError>({
        url: '/lpg-ecus/{id}',
        ...options
    });
};

export const lpgEcuPutLpgEcusById = <ThrowOnError extends boolean = false>(options: Options<LpgEcuPutLpgEcusByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<LpgEcuPutLpgEcusByIdResponses, LpgEcuPutLpgEcusByIdErrors, ThrowOnError>({
        url: '/lpg-ecus/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const lpgInjectorGetLpgInjectors = <ThrowOnError extends boolean = false>(options?: Options<LpgInjectorGetLpgInjectorsData, ThrowOnError>) => {
    return (options?.client ?? client).get<LpgInjectorGetLpgInjectorsResponses, LpgInjectorGetLpgInjectorsErrors, ThrowOnError>({
        url: '/lpg-injectors',
        ...options
    });
};

export const lpgInjectorPostLpgInjectors = <ThrowOnError extends boolean = false>(options?: Options<LpgInjectorPostLpgInjectorsData, ThrowOnError>) => {
    return (options?.client ?? client).post<LpgInjectorPostLpgInjectorsResponses, LpgInjectorPostLpgInjectorsErrors, ThrowOnError>({
        url: '/lpg-injectors',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const lpgInjectorDeleteLpgInjectorsById = <ThrowOnError extends boolean = false>(options: Options<LpgInjectorDeleteLpgInjectorsByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<LpgInjectorDeleteLpgInjectorsByIdResponses, LpgInjectorDeleteLpgInjectorsByIdErrors, ThrowOnError>({
        url: '/lpg-injectors/{id}',
        ...options
    });
};

export const lpgInjectorGetLpgInjectorsById = <ThrowOnError extends boolean = false>(options: Options<LpgInjectorGetLpgInjectorsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<LpgInjectorGetLpgInjectorsByIdResponses, LpgInjectorGetLpgInjectorsByIdErrors, ThrowOnError>({
        url: '/lpg-injectors/{id}',
        ...options
    });
};

export const lpgInjectorPutLpgInjectorsById = <ThrowOnError extends boolean = false>(options: Options<LpgInjectorPutLpgInjectorsByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<LpgInjectorPutLpgInjectorsByIdResponses, LpgInjectorPutLpgInjectorsByIdErrors, ThrowOnError>({
        url: '/lpg-injectors/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const lpgReducerGetLpgReducers = <ThrowOnError extends boolean = false>(options?: Options<LpgReducerGetLpgReducersData, ThrowOnError>) => {
    return (options?.client ?? client).get<LpgReducerGetLpgReducersResponses, LpgReducerGetLpgReducersErrors, ThrowOnError>({
        url: '/lpg-reducers',
        ...options
    });
};

export const lpgReducerPostLpgReducers = <ThrowOnError extends boolean = false>(options?: Options<LpgReducerPostLpgReducersData, ThrowOnError>) => {
    return (options?.client ?? client).post<LpgReducerPostLpgReducersResponses, LpgReducerPostLpgReducersErrors, ThrowOnError>({
        url: '/lpg-reducers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const lpgReducerDeleteLpgReducersById = <ThrowOnError extends boolean = false>(options: Options<LpgReducerDeleteLpgReducersByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<LpgReducerDeleteLpgReducersByIdResponses, LpgReducerDeleteLpgReducersByIdErrors, ThrowOnError>({
        url: '/lpg-reducers/{id}',
        ...options
    });
};

export const lpgReducerGetLpgReducersById = <ThrowOnError extends boolean = false>(options: Options<LpgReducerGetLpgReducersByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<LpgReducerGetLpgReducersByIdResponses, LpgReducerGetLpgReducersByIdErrors, ThrowOnError>({
        url: '/lpg-reducers/{id}',
        ...options
    });
};

export const lpgReducerPutLpgReducersById = <ThrowOnError extends boolean = false>(options: Options<LpgReducerPutLpgReducersByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<LpgReducerPutLpgReducersByIdResponses, LpgReducerPutLpgReducersByIdErrors, ThrowOnError>({
        url: '/lpg-reducers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const lpgTankGetLpgTanks = <ThrowOnError extends boolean = false>(options?: Options<LpgTankGetLpgTanksData, ThrowOnError>) => {
    return (options?.client ?? client).get<LpgTankGetLpgTanksResponses, LpgTankGetLpgTanksErrors, ThrowOnError>({
        url: '/lpg-tanks',
        ...options
    });
};

export const lpgTankPostLpgTanks = <ThrowOnError extends boolean = false>(options?: Options<LpgTankPostLpgTanksData, ThrowOnError>) => {
    return (options?.client ?? client).post<LpgTankPostLpgTanksResponses, LpgTankPostLpgTanksErrors, ThrowOnError>({
        url: '/lpg-tanks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const lpgTankDeleteLpgTanksById = <ThrowOnError extends boolean = false>(options: Options<LpgTankDeleteLpgTanksByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<LpgTankDeleteLpgTanksByIdResponses, LpgTankDeleteLpgTanksByIdErrors, ThrowOnError>({
        url: '/lpg-tanks/{id}',
        ...options
    });
};

export const lpgTankGetLpgTanksById = <ThrowOnError extends boolean = false>(options: Options<LpgTankGetLpgTanksByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<LpgTankGetLpgTanksByIdResponses, LpgTankGetLpgTanksByIdErrors, ThrowOnError>({
        url: '/lpg-tanks/{id}',
        ...options
    });
};

export const lpgTankPutLpgTanksById = <ThrowOnError extends boolean = false>(options: Options<LpgTankPutLpgTanksByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<LpgTankPutLpgTanksByIdResponses, LpgTankPutLpgTanksByIdErrors, ThrowOnError>({
        url: '/lpg-tanks/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const modelGetModels = <ThrowOnError extends boolean = false>(options?: Options<ModelGetModelsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ModelGetModelsResponses, ModelGetModelsErrors, ThrowOnError>({
        url: '/models',
        ...options
    });
};

export const modelPostModels = <ThrowOnError extends boolean = false>(options?: Options<ModelPostModelsData, ThrowOnError>) => {
    return (options?.client ?? client).post<ModelPostModelsResponses, ModelPostModelsErrors, ThrowOnError>({
        url: '/models',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const modelDeleteModelsById = <ThrowOnError extends boolean = false>(options: Options<ModelDeleteModelsByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<ModelDeleteModelsByIdResponses, ModelDeleteModelsByIdErrors, ThrowOnError>({
        url: '/models/{id}',
        ...options
    });
};

export const modelGetModelsById = <ThrowOnError extends boolean = false>(options: Options<ModelGetModelsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<ModelGetModelsByIdResponses, ModelGetModelsByIdErrors, ThrowOnError>({
        url: '/models/{id}',
        ...options
    });
};

export const modelPutModelsById = <ThrowOnError extends boolean = false>(options: Options<ModelPutModelsByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<ModelPutModelsByIdResponses, ModelPutModelsByIdErrors, ThrowOnError>({
        url: '/models/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const contentTypeBuilderGetContentTypes = <ThrowOnError extends boolean = false>(options: Options<ContentTypeBuilderGetContentTypesData, ThrowOnError>) => {
    return (options.client ?? client).get<ContentTypeBuilderGetContentTypesResponses, ContentTypeBuilderGetContentTypesErrors, ThrowOnError>({
        url: '/content-types',
        ...options
    });
};

export const contentTypeBuilderGetContentTypesByUid = <ThrowOnError extends boolean = false>(options: Options<ContentTypeBuilderGetContentTypesByUidData, ThrowOnError>) => {
    return (options.client ?? client).get<ContentTypeBuilderGetContentTypesByUidResponses, ContentTypeBuilderGetContentTypesByUidErrors, ThrowOnError>({
        url: '/content-types/{uid}',
        ...options
    });
};

export const contentTypeBuilderGetComponents = <ThrowOnError extends boolean = false>(options?: Options<ContentTypeBuilderGetComponentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ContentTypeBuilderGetComponentsResponses, ContentTypeBuilderGetComponentsErrors, ThrowOnError>({
        url: '/components',
        ...options
    });
};

export const contentTypeBuilderGetComponentsByUid = <ThrowOnError extends boolean = false>(options: Options<ContentTypeBuilderGetComponentsByUidData, ThrowOnError>) => {
    return (options.client ?? client).get<ContentTypeBuilderGetComponentsByUidResponses, ContentTypeBuilderGetComponentsByUidErrors, ThrowOnError>({
        url: '/components/{uid}',
        ...options
    });
};

export const uploadPost = <ThrowOnError extends boolean = false>(options?: Options<UploadPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<UploadPostResponses, UploadPostErrors, ThrowOnError>({
        url: '/',
        ...options
    });
};

export const uploadGetFiles = <ThrowOnError extends boolean = false>(options?: Options<UploadGetFilesData, ThrowOnError>) => {
    return (options?.client ?? client).get<UploadGetFilesResponses, UploadGetFilesErrors, ThrowOnError>({
        url: '/files',
        ...options
    });
};

export const uploadDeleteFilesById = <ThrowOnError extends boolean = false>(options: Options<UploadDeleteFilesByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<UploadDeleteFilesByIdResponses, UploadDeleteFilesByIdErrors, ThrowOnError>({
        url: '/files/{id}',
        ...options
    });
};

export const uploadGetFilesById = <ThrowOnError extends boolean = false>(options: Options<UploadGetFilesByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<UploadGetFilesByIdResponses, UploadGetFilesByIdErrors, ThrowOnError>({
        url: '/files/{id}',
        ...options
    });
};

export const i18nGetLocales = <ThrowOnError extends boolean = false>(options?: Options<I18nGetLocalesData, ThrowOnError>) => {
    return (options?.client ?? client).get<I18nGetLocalesResponses, I18nGetLocalesErrors, ThrowOnError>({
        url: '/locales',
        ...options
    });
};

export const usersPermissionsGetConnect = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsGetConnectData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, UsersPermissionsGetConnectErrors, ThrowOnError>({
        url: '/connect/(.*)',
        ...options
    });
};

export const usersPermissionsPostAuthLocal = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsPostAuthLocalData, ThrowOnError>) => {
    return (options?.client ?? client).post<UsersPermissionsPostAuthLocalResponses, UsersPermissionsPostAuthLocalErrors, ThrowOnError>({
        url: '/auth/local',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const usersPermissionsPostAuthLocalRegister = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsPostAuthLocalRegisterData, ThrowOnError>) => {
    return (options?.client ?? client).post<UsersPermissionsPostAuthLocalRegisterResponses, UsersPermissionsPostAuthLocalRegisterErrors, ThrowOnError>({
        url: '/auth/local/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const usersPermissionsGetAuthByProviderCallback = <ThrowOnError extends boolean = false>(options: Options<UsersPermissionsGetAuthByProviderCallbackData, ThrowOnError>) => {
    return (options.client ?? client).get<UsersPermissionsGetAuthByProviderCallbackResponses, UsersPermissionsGetAuthByProviderCallbackErrors, ThrowOnError>({
        url: '/auth/{provider}/callback',
        ...options
    });
};

export const usersPermissionsPostAuthForgotPassword = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsPostAuthForgotPasswordData, ThrowOnError>) => {
    return (options?.client ?? client).post<UsersPermissionsPostAuthForgotPasswordResponses, UsersPermissionsPostAuthForgotPasswordErrors, ThrowOnError>({
        url: '/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const usersPermissionsPostAuthResetPassword = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsPostAuthResetPasswordData, ThrowOnError>) => {
    return (options?.client ?? client).post<UsersPermissionsPostAuthResetPasswordResponses, UsersPermissionsPostAuthResetPasswordErrors, ThrowOnError>({
        url: '/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const usersPermissionsGetAuthEmailConfirmation = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsGetAuthEmailConfirmationData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, UsersPermissionsGetAuthEmailConfirmationErrors, ThrowOnError>({
        url: '/auth/email-confirmation',
        ...options
    });
};

export const usersPermissionsPostAuthSendEmailConfirmation = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsPostAuthSendEmailConfirmationData, ThrowOnError>) => {
    return (options?.client ?? client).post<UsersPermissionsPostAuthSendEmailConfirmationResponses, UsersPermissionsPostAuthSendEmailConfirmationErrors, ThrowOnError>({
        url: '/auth/send-email-confirmation',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const usersPermissionsPostAuthChangePassword = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsPostAuthChangePasswordData, ThrowOnError>) => {
    return (options?.client ?? client).post<UsersPermissionsPostAuthChangePasswordResponses, UsersPermissionsPostAuthChangePasswordErrors, ThrowOnError>({
        url: '/auth/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const usersPermissionsPostAuthRefresh = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsPostAuthRefreshData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, UsersPermissionsPostAuthRefreshErrors, ThrowOnError>({
        url: '/auth/refresh',
        ...options
    });
};

export const usersPermissionsPostAuthLogout = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsPostAuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, UsersPermissionsPostAuthLogoutErrors, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

export const usersPermissionsGetUsersCount = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsGetUsersCountData, ThrowOnError>) => {
    return (options?.client ?? client).get<UsersPermissionsGetUsersCountResponses, UsersPermissionsGetUsersCountErrors, ThrowOnError>({
        url: '/users/count',
        ...options
    });
};

export const usersPermissionsGetUsers = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsGetUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<UsersPermissionsGetUsersResponses, UsersPermissionsGetUsersErrors, ThrowOnError>({
        url: '/users',
        ...options
    });
};

export const usersPermissionsPostUsers = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsPostUsersData, ThrowOnError>) => {
    return (options?.client ?? client).post<UsersPermissionsPostUsersResponses, UsersPermissionsPostUsersErrors, ThrowOnError>({
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const usersPermissionsGetUsersMe = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsGetUsersMeData, ThrowOnError>) => {
    return (options?.client ?? client).get<UsersPermissionsGetUsersMeResponses, UsersPermissionsGetUsersMeErrors, ThrowOnError>({
        url: '/users/me',
        ...options
    });
};

export const usersPermissionsDeleteUsersById = <ThrowOnError extends boolean = false>(options: Options<UsersPermissionsDeleteUsersByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<UsersPermissionsDeleteUsersByIdResponses, UsersPermissionsDeleteUsersByIdErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

export const usersPermissionsGetUsersById = <ThrowOnError extends boolean = false>(options: Options<UsersPermissionsGetUsersByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<UsersPermissionsGetUsersByIdResponses, UsersPermissionsGetUsersByIdErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

export const usersPermissionsPutUsersById = <ThrowOnError extends boolean = false>(options: Options<UsersPermissionsPutUsersByIdData, ThrowOnError>) => {
    return (options.client ?? client).put<UsersPermissionsPutUsersByIdResponses, UsersPermissionsPutUsersByIdErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const usersPermissionsGetRolesById = <ThrowOnError extends boolean = false>(options: Options<UsersPermissionsGetRolesByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<UsersPermissionsGetRolesByIdResponses, UsersPermissionsGetRolesByIdErrors, ThrowOnError>({
        url: '/roles/{id}',
        ...options
    });
};

export const usersPermissionsGetRoles = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsGetRolesData, ThrowOnError>) => {
    return (options?.client ?? client).get<UsersPermissionsGetRolesResponses, UsersPermissionsGetRolesErrors, ThrowOnError>({
        url: '/roles',
        ...options
    });
};

export const usersPermissionsPostRoles = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsPostRolesData, ThrowOnError>) => {
    return (options?.client ?? client).post<UsersPermissionsPostRolesResponses, UsersPermissionsPostRolesErrors, ThrowOnError>({
        url: '/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const usersPermissionsDeleteRolesByRole = <ThrowOnError extends boolean = false>(options: Options<UsersPermissionsDeleteRolesByRoleData, ThrowOnError>) => {
    return (options.client ?? client).delete<UsersPermissionsDeleteRolesByRoleResponses, UsersPermissionsDeleteRolesByRoleErrors, ThrowOnError>({
        url: '/roles/{role}',
        ...options
    });
};

export const usersPermissionsPutRolesByRole = <ThrowOnError extends boolean = false>(options: Options<UsersPermissionsPutRolesByRoleData, ThrowOnError>) => {
    return (options.client ?? client).put<UsersPermissionsPutRolesByRoleResponses, UsersPermissionsPutRolesByRoleErrors, ThrowOnError>({
        url: '/roles/{role}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const usersPermissionsGetPermissions = <ThrowOnError extends boolean = false>(options?: Options<UsersPermissionsGetPermissionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<UsersPermissionsGetPermissionsResponses, UsersPermissionsGetPermissionsErrors, ThrowOnError>({
        url: '/permissions',
        ...options
    });
};
