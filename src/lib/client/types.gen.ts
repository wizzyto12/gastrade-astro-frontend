// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://127.0.0.1:1337' | (string & {});
};

export type PluginUploadFileDocument = {
    /**
     * The document ID, represented by a UUID
     */
    documentId: string;
    id: number;
    /**
     * A string field
     */
    name: string;
    /**
     * A string field
     */
    alternativeText?: string;
    /**
     * A string field
     */
    caption?: string;
    /**
     * An integer field
     */
    width?: number;
    /**
     * An integer field
     */
    height?: number;
    /**
     * A JSON field
     */
    formats?: unknown;
    /**
     * A string field
     */
    hash: string;
    /**
     * A string field
     */
    ext?: string;
    /**
     * A string field
     */
    mime: string;
    /**
     * A decimal field
     */
    size: number;
    /**
     * A string field
     */
    url: string;
    /**
     * A string field
     */
    previewUrl?: string;
    /**
     * A string field
     */
    provider: string;
    /**
     * A JSON field
     */
    provider_metadata?: unknown;
    /**
     * A datetime field
     */
    createdAt?: string;
    /**
     * A datetime field
     */
    updatedAt?: string;
    /**
     * A datetime field
     */
    publishedAt: string;
    related: unknown;
};

export type ApiBrandBrandDocument = {
    /**
     * The document ID, represented by a UUID
     */
    documentId: string;
    id: number;
    /**
     * A string field
     */
    name: string;
    /**
     * A datetime field
     */
    createdAt?: string;
    /**
     * A datetime field
     */
    updatedAt?: string;
    /**
     * A datetime field
     */
    publishedAt: string;
    /**
     * A media field
     */
    logo: PluginUploadFileDocument;
    /**
     * A relational field
     */
    models?: Array<ApiModelModelDocument>;
};

export type ApiLpgReducerLpgReducerDocument = {
    /**
     * The document ID, represented by a UUID
     */
    documentId: string;
    id: number;
    /**
     * A string field
     */
    name: string;
    /**
     * A datetime field
     */
    createdAt?: string;
    /**
     * A datetime field
     */
    updatedAt?: string;
    /**
     * A datetime field
     */
    publishedAt: string;
    /**
     * A relational field
     */
    lpg_brand?: ApiLpgBrandLpgBrandDocument;
    /**
     * A relational field
     */
    installations?: Array<ApiInstallationInstallationDocument>;
};

export type ApiLpgInjectorLpgInjectorDocument = {
    /**
     * The document ID, represented by a UUID
     */
    documentId: string;
    id: number;
    /**
     * A string field
     */
    name: string;
    /**
     * A datetime field
     */
    createdAt?: string;
    /**
     * A datetime field
     */
    updatedAt?: string;
    /**
     * A datetime field
     */
    publishedAt: string;
    /**
     * A relational field
     */
    lpg_brand?: ApiLpgBrandLpgBrandDocument;
    /**
     * A relational field
     */
    installations?: Array<ApiInstallationInstallationDocument>;
};

export type ApiLpgTankLpgTankDocument = {
    /**
     * The document ID, represented by a UUID
     */
    documentId: string;
    id: number;
    /**
     * An integer field
     */
    volume: number;
    /**
     * A datetime field
     */
    createdAt?: string;
    /**
     * A datetime field
     */
    updatedAt?: string;
    /**
     * A datetime field
     */
    publishedAt: string;
    /**
     * A relational field
     */
    lpg_brand?: ApiLpgBrandLpgBrandDocument;
    /**
     * A relational field
     */
    installations?: Array<ApiInstallationInstallationDocument>;
};

export type ApiLpgBrandLpgBrandDocument = {
    /**
     * The document ID, represented by a UUID
     */
    documentId: string;
    id: number;
    /**
     * A string field
     */
    name: string;
    /**
     * A datetime field
     */
    createdAt?: string;
    /**
     * A datetime field
     */
    updatedAt?: string;
    /**
     * A datetime field
     */
    publishedAt: string;
    /**
     * A media field
     */
    logo: PluginUploadFileDocument;
    /**
     * A relational field
     */
    lpg_reducers?: Array<ApiLpgReducerLpgReducerDocument>;
    /**
     * A relational field
     */
    lpg_injectors?: Array<ApiLpgInjectorLpgInjectorDocument>;
    /**
     * A relational field
     */
    lpg_ecus?: Array<ApiLpgEcuLpgEcuDocument>;
    /**
     * A relational field
     */
    lpg_tanks?: Array<ApiLpgTankLpgTankDocument>;
};

export type ApiLpgEcuLpgEcuDocument = {
    /**
     * The document ID, represented by a UUID
     */
    documentId: string;
    id: number;
    /**
     * A string field
     */
    name?: string;
    /**
     * A datetime field
     */
    createdAt?: string;
    /**
     * A datetime field
     */
    updatedAt?: string;
    /**
     * A datetime field
     */
    publishedAt: string;
    /**
     * A relational field
     */
    lpg_brand?: ApiLpgBrandLpgBrandDocument;
    /**
     * A relational field
     */
    installations?: Array<ApiInstallationInstallationDocument>;
};

export type ApiInstallationInstallationDocument = {
    /**
     * The document ID, represented by a UUID
     */
    documentId: string;
    id: number;
    /**
     * A string field
     */
    subheading: string;
    /**
     * A datetime field
     */
    createdAt?: string;
    /**
     * A datetime field
     */
    updatedAt?: string;
    /**
     * A datetime field
     */
    publishedAt: string;
    /**
     * A relational field
     */
    lpg_ecus?: ApiLpgEcuLpgEcuDocument;
    /**
     * A relational field
     */
    lpg_injector?: ApiLpgInjectorLpgInjectorDocument;
    /**
     * A relational field
     */
    lpg_reducer?: ApiLpgReducerLpgReducerDocument;
    /**
     * A relational field
     */
    lpg_tank?: ApiLpgTankLpgTankDocument;
    /**
     * A relational field
     */
    car?: ApiCarCarDocument;
    /**
     * A media field
     */
    gallery: Array<PluginUploadFileDocument>;
};

export type ApiCarCarDocument = {
    /**
     * The document ID, represented by a UUID
     */
    documentId: string;
    id: number;
    /**
     * A date field
     */
    year?: string;
    /**
     * A string field
     */
    engine?: string;
    /**
     * A datetime field
     */
    createdAt?: string;
    /**
     * A datetime field
     */
    updatedAt?: string;
    /**
     * A datetime field
     */
    publishedAt: string;
    /**
     * A relational field
     */
    model?: ApiModelModelDocument;
    /**
     * A relational field
     */
    installations?: Array<ApiInstallationInstallationDocument>;
};

export type ApiModelModelDocument = {
    /**
     * The document ID, represented by a UUID
     */
    documentId: string;
    id: number;
    /**
     * A string field
     */
    name: string;
    /**
     * A datetime field
     */
    createdAt?: string;
    /**
     * A datetime field
     */
    updatedAt?: string;
    /**
     * A datetime field
     */
    publishedAt: string;
    /**
     * A relational field
     */
    brand?: ApiBrandBrandDocument;
    /**
     * A relational field
     */
    cars?: Array<ApiCarCarDocument>;
};

export type BrandGetBrandsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        _q?: string;
        /**
         * Pagination parameters
         */
        pagination?: {
            /**
             * Include total count in response
             */
            withCount?: boolean;
        } & ({
            /**
             * Page number (1-based)
             */
            page: number;
            /**
             * Number of entries per page
             */
            pageSize: number;
        } | {
            /**
             * Number of entries to skip
             */
            start: number;
            /**
             * Maximum number of entries to return
             */
            limit: number;
        });
        /**
         * Sort the result
         */
        sort?: 'name' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
        populate?: '*' | 'logo' | 'models' | Array<'logo' | 'models'>;
    };
    url: '/brands';
};

export type BrandGetBrandsErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type BrandGetBrandsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<{
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A media field
             */
            logo: PluginUploadFileDocument;
            /**
             * A relational field
             */
            models?: Array<ApiModelModelDocument>;
        }>;
    };
};

export type BrandGetBrandsResponse = BrandGetBrandsResponses[keyof BrandGetBrandsResponses];

export type BrandPostBrandsData = {
    body?: {
        data: {
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A media field
             */
            logo: unknown;
            /**
             * A relational field
             */
            models?: Array<string>;
        };
    };
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'logo' | 'models' | Array<'logo' | 'models'>;
    };
    url: '/brands';
};

export type BrandPostBrandsErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type BrandPostBrandsResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A media field
             */
            logo: PluginUploadFileDocument;
            /**
             * A relational field
             */
            models?: Array<ApiModelModelDocument>;
        };
    };
};

export type BrandPostBrandsResponse = BrandPostBrandsResponses[keyof BrandPostBrandsResponses];

export type BrandDeleteBrandsByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'logo' | 'models' | Array<'logo' | 'models'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
    };
    url: '/brands/{id}';
};

export type BrandDeleteBrandsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type BrandDeleteBrandsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A media field
             */
            logo: PluginUploadFileDocument;
            /**
             * A relational field
             */
            models?: Array<ApiModelModelDocument>;
        };
    };
};

export type BrandDeleteBrandsByIdResponse = BrandDeleteBrandsByIdResponses[keyof BrandDeleteBrandsByIdResponses];

export type BrandGetBrandsByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'logo' | 'models' | Array<'logo' | 'models'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort the result
         */
        sort?: 'name' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
    };
    url: '/brands/{id}';
};

export type BrandGetBrandsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type BrandGetBrandsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A media field
             */
            logo: PluginUploadFileDocument;
            /**
             * A relational field
             */
            models?: Array<ApiModelModelDocument>;
        };
    };
};

export type BrandGetBrandsByIdResponse = BrandGetBrandsByIdResponses[keyof BrandGetBrandsByIdResponses];

export type BrandPutBrandsByIdData = {
    body?: {
        data: {
            /**
             * A string field
             */
            name?: string;
            /**
             * A datetime field
             */
            publishedAt?: string;
            /**
             * A media field
             */
            logo?: unknown;
            /**
             * A relational field
             */
            models?: Array<string>;
        };
    };
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'logo' | 'models' | Array<'logo' | 'models'>;
    };
    url: '/brands/{id}';
};

export type BrandPutBrandsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type BrandPutBrandsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A media field
             */
            logo: PluginUploadFileDocument;
            /**
             * A relational field
             */
            models?: Array<ApiModelModelDocument>;
        };
    };
};

export type BrandPutBrandsByIdResponse = BrandPutBrandsByIdResponses[keyof BrandPutBrandsByIdResponses];

export type CarGetCarsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'year' | 'engine' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        _q?: string;
        /**
         * Pagination parameters
         */
        pagination?: {
            /**
             * Include total count in response
             */
            withCount?: boolean;
        } & ({
            /**
             * Page number (1-based)
             */
            page: number;
            /**
             * Number of entries per page
             */
            pageSize: number;
        } | {
            /**
             * Number of entries to skip
             */
            start: number;
            /**
             * Maximum number of entries to return
             */
            limit: number;
        });
        /**
         * Sort the result
         */
        sort?: 'year' | 'engine' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'year' | 'engine' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
        populate?: '*' | 'model' | 'installations' | Array<'model' | 'installations'>;
    };
    url: '/cars';
};

export type CarGetCarsErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type CarGetCarsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<{
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A date field
             */
            year?: string;
            /**
             * A string field
             */
            engine?: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            model?: ApiModelModelDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        }>;
    };
};

export type CarGetCarsResponse = CarGetCarsResponses[keyof CarGetCarsResponses];

export type CarPostCarsData = {
    body?: {
        data: {
            /**
             * A date field
             */
            year?: string;
            /**
             * A string field
             */
            engine?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            model?: string;
            /**
             * A relational field
             */
            installations?: Array<string>;
        };
    };
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'year' | 'engine' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'model' | 'installations' | Array<'model' | 'installations'>;
    };
    url: '/cars';
};

export type CarPostCarsErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type CarPostCarsResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A date field
             */
            year?: string;
            /**
             * A string field
             */
            engine?: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            model?: ApiModelModelDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type CarPostCarsResponse = CarPostCarsResponses[keyof CarPostCarsResponses];

export type CarDeleteCarsByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'year' | 'engine' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'model' | 'installations' | Array<'model' | 'installations'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
    };
    url: '/cars/{id}';
};

export type CarDeleteCarsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type CarDeleteCarsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A date field
             */
            year?: string;
            /**
             * A string field
             */
            engine?: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            model?: ApiModelModelDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type CarDeleteCarsByIdResponse = CarDeleteCarsByIdResponses[keyof CarDeleteCarsByIdResponses];

export type CarGetCarsByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'year' | 'engine' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'model' | 'installations' | Array<'model' | 'installations'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort the result
         */
        sort?: 'year' | 'engine' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'year' | 'engine' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
    };
    url: '/cars/{id}';
};

export type CarGetCarsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type CarGetCarsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A date field
             */
            year?: string;
            /**
             * A string field
             */
            engine?: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            model?: ApiModelModelDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type CarGetCarsByIdResponse = CarGetCarsByIdResponses[keyof CarGetCarsByIdResponses];

export type CarPutCarsByIdData = {
    body?: {
        data: {
            /**
             * A date field
             */
            year?: string;
            /**
             * A string field
             */
            engine?: string;
            /**
             * A datetime field
             */
            publishedAt?: string;
            /**
             * A relational field
             */
            model?: string;
            /**
             * A relational field
             */
            installations?: Array<string>;
        };
    };
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'year' | 'engine' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'model' | 'installations' | Array<'model' | 'installations'>;
    };
    url: '/cars/{id}';
};

export type CarPutCarsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type CarPutCarsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A date field
             */
            year?: string;
            /**
             * A string field
             */
            engine?: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            model?: ApiModelModelDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type CarPutCarsByIdResponse = CarPutCarsByIdResponses[keyof CarPutCarsByIdResponses];

export type InstallationGetInstallationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'subheading' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        _q?: string;
        /**
         * Pagination parameters
         */
        pagination?: {
            /**
             * Include total count in response
             */
            withCount?: boolean;
        } & ({
            /**
             * Page number (1-based)
             */
            page: number;
            /**
             * Number of entries per page
             */
            pageSize: number;
        } | {
            /**
             * Number of entries to skip
             */
            start: number;
            /**
             * Maximum number of entries to return
             */
            limit: number;
        });
        /**
         * Sort the result
         */
        sort?: 'subheading' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'subheading' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
        populate?: '*' | 'lpg_ecus' | 'lpg_injector' | 'lpg_reducer' | 'lpg_tank' | 'car' | 'gallery' | Array<'lpg_ecus' | 'lpg_injector' | 'lpg_reducer' | 'lpg_tank' | 'car' | 'gallery'>;
        /**
         * Fetch documents based on their status. Default to "published" if not specified.
         */
        status?: 'draft' | 'published';
    };
    url: '/installations';
};

export type InstallationGetInstallationsErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type InstallationGetInstallationsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<{
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            subheading: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_ecus?: ApiLpgEcuLpgEcuDocument;
            /**
             * A relational field
             */
            lpg_injector?: ApiLpgInjectorLpgInjectorDocument;
            /**
             * A relational field
             */
            lpg_reducer?: ApiLpgReducerLpgReducerDocument;
            /**
             * A relational field
             */
            lpg_tank?: ApiLpgTankLpgTankDocument;
            /**
             * A relational field
             */
            car?: ApiCarCarDocument;
            /**
             * A media field
             */
            gallery: Array<PluginUploadFileDocument>;
        }>;
    };
};

export type InstallationGetInstallationsResponse = InstallationGetInstallationsResponses[keyof InstallationGetInstallationsResponses];

export type InstallationPostInstallationsData = {
    body?: {
        data: {
            /**
             * A string field
             */
            subheading: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_ecus?: string;
            /**
             * A relational field
             */
            lpg_injector?: string;
            /**
             * A relational field
             */
            lpg_reducer?: string;
            /**
             * A relational field
             */
            lpg_tank?: string;
            /**
             * A relational field
             */
            car?: string;
            /**
             * A media field
             */
            gallery: Array<unknown>;
        };
    };
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'subheading' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_ecus' | 'lpg_injector' | 'lpg_reducer' | 'lpg_tank' | 'car' | 'gallery' | Array<'lpg_ecus' | 'lpg_injector' | 'lpg_reducer' | 'lpg_tank' | 'car' | 'gallery'>;
        /**
         * Fetch documents based on their status. Default to "published" if not specified.
         */
        status?: 'draft' | 'published';
    };
    url: '/installations';
};

export type InstallationPostInstallationsErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type InstallationPostInstallationsResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            subheading: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_ecus?: ApiLpgEcuLpgEcuDocument;
            /**
             * A relational field
             */
            lpg_injector?: ApiLpgInjectorLpgInjectorDocument;
            /**
             * A relational field
             */
            lpg_reducer?: ApiLpgReducerLpgReducerDocument;
            /**
             * A relational field
             */
            lpg_tank?: ApiLpgTankLpgTankDocument;
            /**
             * A relational field
             */
            car?: ApiCarCarDocument;
            /**
             * A media field
             */
            gallery: Array<PluginUploadFileDocument>;
        };
    };
};

export type InstallationPostInstallationsResponse = InstallationPostInstallationsResponses[keyof InstallationPostInstallationsResponses];

export type InstallationDeleteInstallationsByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'subheading' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_ecus' | 'lpg_injector' | 'lpg_reducer' | 'lpg_tank' | 'car' | 'gallery' | Array<'lpg_ecus' | 'lpg_injector' | 'lpg_reducer' | 'lpg_tank' | 'car' | 'gallery'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Fetch documents based on their status. Default to "published" if not specified.
         */
        status?: 'draft' | 'published';
    };
    url: '/installations/{id}';
};

export type InstallationDeleteInstallationsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type InstallationDeleteInstallationsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            subheading: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_ecus?: ApiLpgEcuLpgEcuDocument;
            /**
             * A relational field
             */
            lpg_injector?: ApiLpgInjectorLpgInjectorDocument;
            /**
             * A relational field
             */
            lpg_reducer?: ApiLpgReducerLpgReducerDocument;
            /**
             * A relational field
             */
            lpg_tank?: ApiLpgTankLpgTankDocument;
            /**
             * A relational field
             */
            car?: ApiCarCarDocument;
            /**
             * A media field
             */
            gallery: Array<PluginUploadFileDocument>;
        };
    };
};

export type InstallationDeleteInstallationsByIdResponse = InstallationDeleteInstallationsByIdResponses[keyof InstallationDeleteInstallationsByIdResponses];

export type InstallationGetInstallationsByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'subheading' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_ecus' | 'lpg_injector' | 'lpg_reducer' | 'lpg_tank' | 'car' | 'gallery' | Array<'lpg_ecus' | 'lpg_injector' | 'lpg_reducer' | 'lpg_tank' | 'car' | 'gallery'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort the result
         */
        sort?: 'subheading' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'subheading' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
        /**
         * Fetch documents based on their status. Default to "published" if not specified.
         */
        status?: 'draft' | 'published';
    };
    url: '/installations/{id}';
};

export type InstallationGetInstallationsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type InstallationGetInstallationsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            subheading: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_ecus?: ApiLpgEcuLpgEcuDocument;
            /**
             * A relational field
             */
            lpg_injector?: ApiLpgInjectorLpgInjectorDocument;
            /**
             * A relational field
             */
            lpg_reducer?: ApiLpgReducerLpgReducerDocument;
            /**
             * A relational field
             */
            lpg_tank?: ApiLpgTankLpgTankDocument;
            /**
             * A relational field
             */
            car?: ApiCarCarDocument;
            /**
             * A media field
             */
            gallery: Array<PluginUploadFileDocument>;
        };
    };
};

export type InstallationGetInstallationsByIdResponse = InstallationGetInstallationsByIdResponses[keyof InstallationGetInstallationsByIdResponses];

export type InstallationPutInstallationsByIdData = {
    body?: {
        data: {
            /**
             * A string field
             */
            subheading?: string;
            /**
             * A datetime field
             */
            publishedAt?: string;
            /**
             * A relational field
             */
            lpg_ecus?: string;
            /**
             * A relational field
             */
            lpg_injector?: string;
            /**
             * A relational field
             */
            lpg_reducer?: string;
            /**
             * A relational field
             */
            lpg_tank?: string;
            /**
             * A relational field
             */
            car?: string;
            /**
             * A media field
             */
            gallery?: Array<unknown>;
        };
    };
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'subheading' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_ecus' | 'lpg_injector' | 'lpg_reducer' | 'lpg_tank' | 'car' | 'gallery' | Array<'lpg_ecus' | 'lpg_injector' | 'lpg_reducer' | 'lpg_tank' | 'car' | 'gallery'>;
        /**
         * Fetch documents based on their status. Default to "published" if not specified.
         */
        status?: 'draft' | 'published';
    };
    url: '/installations/{id}';
};

export type InstallationPutInstallationsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type InstallationPutInstallationsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            subheading: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_ecus?: ApiLpgEcuLpgEcuDocument;
            /**
             * A relational field
             */
            lpg_injector?: ApiLpgInjectorLpgInjectorDocument;
            /**
             * A relational field
             */
            lpg_reducer?: ApiLpgReducerLpgReducerDocument;
            /**
             * A relational field
             */
            lpg_tank?: ApiLpgTankLpgTankDocument;
            /**
             * A relational field
             */
            car?: ApiCarCarDocument;
            /**
             * A media field
             */
            gallery: Array<PluginUploadFileDocument>;
        };
    };
};

export type InstallationPutInstallationsByIdResponse = InstallationPutInstallationsByIdResponses[keyof InstallationPutInstallationsByIdResponses];

export type LpgBrandGetLpgBrandsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        _q?: string;
        /**
         * Pagination parameters
         */
        pagination?: {
            /**
             * Include total count in response
             */
            withCount?: boolean;
        } & ({
            /**
             * Page number (1-based)
             */
            page: number;
            /**
             * Number of entries per page
             */
            pageSize: number;
        } | {
            /**
             * Number of entries to skip
             */
            start: number;
            /**
             * Maximum number of entries to return
             */
            limit: number;
        });
        /**
         * Sort the result
         */
        sort?: 'name' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
        populate?: '*' | 'logo' | 'lpg_reducers' | 'lpg_injectors' | 'lpg_ecus' | 'lpg_tanks' | Array<'logo' | 'lpg_reducers' | 'lpg_injectors' | 'lpg_ecus' | 'lpg_tanks'>;
        /**
         * Fetch documents based on their status. Default to "published" if not specified.
         */
        status?: 'draft' | 'published';
    };
    url: '/lpg-brands';
};

export type LpgBrandGetLpgBrandsErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgBrandGetLpgBrandsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<{
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A media field
             */
            logo: PluginUploadFileDocument;
            /**
             * A relational field
             */
            lpg_reducers?: Array<ApiLpgReducerLpgReducerDocument>;
            /**
             * A relational field
             */
            lpg_injectors?: Array<ApiLpgInjectorLpgInjectorDocument>;
            /**
             * A relational field
             */
            lpg_ecus?: Array<ApiLpgEcuLpgEcuDocument>;
            /**
             * A relational field
             */
            lpg_tanks?: Array<ApiLpgTankLpgTankDocument>;
        }>;
    };
};

export type LpgBrandGetLpgBrandsResponse = LpgBrandGetLpgBrandsResponses[keyof LpgBrandGetLpgBrandsResponses];

export type LpgBrandPostLpgBrandsData = {
    body?: {
        data: {
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A media field
             */
            logo: unknown;
            /**
             * A relational field
             */
            lpg_reducers?: Array<string>;
            /**
             * A relational field
             */
            lpg_injectors?: Array<string>;
            /**
             * A relational field
             */
            lpg_ecus?: Array<string>;
            /**
             * A relational field
             */
            lpg_tanks?: Array<string>;
        };
    };
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'logo' | 'lpg_reducers' | 'lpg_injectors' | 'lpg_ecus' | 'lpg_tanks' | Array<'logo' | 'lpg_reducers' | 'lpg_injectors' | 'lpg_ecus' | 'lpg_tanks'>;
        /**
         * Fetch documents based on their status. Default to "published" if not specified.
         */
        status?: 'draft' | 'published';
    };
    url: '/lpg-brands';
};

export type LpgBrandPostLpgBrandsErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgBrandPostLpgBrandsResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A media field
             */
            logo: PluginUploadFileDocument;
            /**
             * A relational field
             */
            lpg_reducers?: Array<ApiLpgReducerLpgReducerDocument>;
            /**
             * A relational field
             */
            lpg_injectors?: Array<ApiLpgInjectorLpgInjectorDocument>;
            /**
             * A relational field
             */
            lpg_ecus?: Array<ApiLpgEcuLpgEcuDocument>;
            /**
             * A relational field
             */
            lpg_tanks?: Array<ApiLpgTankLpgTankDocument>;
        };
    };
};

export type LpgBrandPostLpgBrandsResponse = LpgBrandPostLpgBrandsResponses[keyof LpgBrandPostLpgBrandsResponses];

export type LpgBrandDeleteLpgBrandsByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'logo' | 'lpg_reducers' | 'lpg_injectors' | 'lpg_ecus' | 'lpg_tanks' | Array<'logo' | 'lpg_reducers' | 'lpg_injectors' | 'lpg_ecus' | 'lpg_tanks'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Fetch documents based on their status. Default to "published" if not specified.
         */
        status?: 'draft' | 'published';
    };
    url: '/lpg-brands/{id}';
};

export type LpgBrandDeleteLpgBrandsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgBrandDeleteLpgBrandsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A media field
             */
            logo: PluginUploadFileDocument;
            /**
             * A relational field
             */
            lpg_reducers?: Array<ApiLpgReducerLpgReducerDocument>;
            /**
             * A relational field
             */
            lpg_injectors?: Array<ApiLpgInjectorLpgInjectorDocument>;
            /**
             * A relational field
             */
            lpg_ecus?: Array<ApiLpgEcuLpgEcuDocument>;
            /**
             * A relational field
             */
            lpg_tanks?: Array<ApiLpgTankLpgTankDocument>;
        };
    };
};

export type LpgBrandDeleteLpgBrandsByIdResponse = LpgBrandDeleteLpgBrandsByIdResponses[keyof LpgBrandDeleteLpgBrandsByIdResponses];

export type LpgBrandGetLpgBrandsByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'logo' | 'lpg_reducers' | 'lpg_injectors' | 'lpg_ecus' | 'lpg_tanks' | Array<'logo' | 'lpg_reducers' | 'lpg_injectors' | 'lpg_ecus' | 'lpg_tanks'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort the result
         */
        sort?: 'name' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
        /**
         * Fetch documents based on their status. Default to "published" if not specified.
         */
        status?: 'draft' | 'published';
    };
    url: '/lpg-brands/{id}';
};

export type LpgBrandGetLpgBrandsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgBrandGetLpgBrandsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A media field
             */
            logo: PluginUploadFileDocument;
            /**
             * A relational field
             */
            lpg_reducers?: Array<ApiLpgReducerLpgReducerDocument>;
            /**
             * A relational field
             */
            lpg_injectors?: Array<ApiLpgInjectorLpgInjectorDocument>;
            /**
             * A relational field
             */
            lpg_ecus?: Array<ApiLpgEcuLpgEcuDocument>;
            /**
             * A relational field
             */
            lpg_tanks?: Array<ApiLpgTankLpgTankDocument>;
        };
    };
};

export type LpgBrandGetLpgBrandsByIdResponse = LpgBrandGetLpgBrandsByIdResponses[keyof LpgBrandGetLpgBrandsByIdResponses];

export type LpgBrandPutLpgBrandsByIdData = {
    body?: {
        data: {
            /**
             * A string field
             */
            name?: string;
            /**
             * A datetime field
             */
            publishedAt?: string;
            /**
             * A media field
             */
            logo?: unknown;
            /**
             * A relational field
             */
            lpg_reducers?: Array<string>;
            /**
             * A relational field
             */
            lpg_injectors?: Array<string>;
            /**
             * A relational field
             */
            lpg_ecus?: Array<string>;
            /**
             * A relational field
             */
            lpg_tanks?: Array<string>;
        };
    };
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'logo' | 'lpg_reducers' | 'lpg_injectors' | 'lpg_ecus' | 'lpg_tanks' | Array<'logo' | 'lpg_reducers' | 'lpg_injectors' | 'lpg_ecus' | 'lpg_tanks'>;
        /**
         * Fetch documents based on their status. Default to "published" if not specified.
         */
        status?: 'draft' | 'published';
    };
    url: '/lpg-brands/{id}';
};

export type LpgBrandPutLpgBrandsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgBrandPutLpgBrandsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A media field
             */
            logo: PluginUploadFileDocument;
            /**
             * A relational field
             */
            lpg_reducers?: Array<ApiLpgReducerLpgReducerDocument>;
            /**
             * A relational field
             */
            lpg_injectors?: Array<ApiLpgInjectorLpgInjectorDocument>;
            /**
             * A relational field
             */
            lpg_ecus?: Array<ApiLpgEcuLpgEcuDocument>;
            /**
             * A relational field
             */
            lpg_tanks?: Array<ApiLpgTankLpgTankDocument>;
        };
    };
};

export type LpgBrandPutLpgBrandsByIdResponse = LpgBrandPutLpgBrandsByIdResponses[keyof LpgBrandPutLpgBrandsByIdResponses];

export type LpgEcuGetLpgEcusData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        _q?: string;
        /**
         * Pagination parameters
         */
        pagination?: {
            /**
             * Include total count in response
             */
            withCount?: boolean;
        } & ({
            /**
             * Page number (1-based)
             */
            page: number;
            /**
             * Number of entries per page
             */
            pageSize: number;
        } | {
            /**
             * Number of entries to skip
             */
            start: number;
            /**
             * Maximum number of entries to return
             */
            limit: number;
        });
        /**
         * Sort the result
         */
        sort?: 'name' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
    };
    url: '/lpg-ecus';
};

export type LpgEcuGetLpgEcusErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgEcuGetLpgEcusResponses = {
    /**
     * OK
     */
    200: {
        data: Array<{
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name?: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        }>;
    };
};

export type LpgEcuGetLpgEcusResponse = LpgEcuGetLpgEcusResponses[keyof LpgEcuGetLpgEcusResponses];

export type LpgEcuPostLpgEcusData = {
    body?: {
        data: {
            /**
             * A string field
             */
            name?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: string;
            /**
             * A relational field
             */
            installations?: Array<string>;
        };
    };
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
    };
    url: '/lpg-ecus';
};

export type LpgEcuPostLpgEcusErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgEcuPostLpgEcusResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name?: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgEcuPostLpgEcusResponse = LpgEcuPostLpgEcusResponses[keyof LpgEcuPostLpgEcusResponses];

export type LpgEcuDeleteLpgEcusByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
    };
    url: '/lpg-ecus/{id}';
};

export type LpgEcuDeleteLpgEcusByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgEcuDeleteLpgEcusByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name?: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgEcuDeleteLpgEcusByIdResponse = LpgEcuDeleteLpgEcusByIdResponses[keyof LpgEcuDeleteLpgEcusByIdResponses];

export type LpgEcuGetLpgEcusByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort the result
         */
        sort?: 'name' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
    };
    url: '/lpg-ecus/{id}';
};

export type LpgEcuGetLpgEcusByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgEcuGetLpgEcusByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name?: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgEcuGetLpgEcusByIdResponse = LpgEcuGetLpgEcusByIdResponses[keyof LpgEcuGetLpgEcusByIdResponses];

export type LpgEcuPutLpgEcusByIdData = {
    body?: {
        data: {
            /**
             * A string field
             */
            name?: string;
            /**
             * A datetime field
             */
            publishedAt?: string;
            /**
             * A relational field
             */
            lpg_brand?: string;
            /**
             * A relational field
             */
            installations?: Array<string>;
        };
    };
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
    };
    url: '/lpg-ecus/{id}';
};

export type LpgEcuPutLpgEcusByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgEcuPutLpgEcusByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name?: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgEcuPutLpgEcusByIdResponse = LpgEcuPutLpgEcusByIdResponses[keyof LpgEcuPutLpgEcusByIdResponses];

export type LpgInjectorGetLpgInjectorsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        _q?: string;
        /**
         * Pagination parameters
         */
        pagination?: {
            /**
             * Include total count in response
             */
            withCount?: boolean;
        } & ({
            /**
             * Page number (1-based)
             */
            page: number;
            /**
             * Number of entries per page
             */
            pageSize: number;
        } | {
            /**
             * Number of entries to skip
             */
            start: number;
            /**
             * Maximum number of entries to return
             */
            limit: number;
        });
        /**
         * Sort the result
         */
        sort?: 'name' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
    };
    url: '/lpg-injectors';
};

export type LpgInjectorGetLpgInjectorsErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgInjectorGetLpgInjectorsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<{
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        }>;
    };
};

export type LpgInjectorGetLpgInjectorsResponse = LpgInjectorGetLpgInjectorsResponses[keyof LpgInjectorGetLpgInjectorsResponses];

export type LpgInjectorPostLpgInjectorsData = {
    body?: {
        data: {
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: string;
            /**
             * A relational field
             */
            installations?: Array<string>;
        };
    };
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
    };
    url: '/lpg-injectors';
};

export type LpgInjectorPostLpgInjectorsErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgInjectorPostLpgInjectorsResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgInjectorPostLpgInjectorsResponse = LpgInjectorPostLpgInjectorsResponses[keyof LpgInjectorPostLpgInjectorsResponses];

export type LpgInjectorDeleteLpgInjectorsByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
    };
    url: '/lpg-injectors/{id}';
};

export type LpgInjectorDeleteLpgInjectorsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgInjectorDeleteLpgInjectorsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgInjectorDeleteLpgInjectorsByIdResponse = LpgInjectorDeleteLpgInjectorsByIdResponses[keyof LpgInjectorDeleteLpgInjectorsByIdResponses];

export type LpgInjectorGetLpgInjectorsByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort the result
         */
        sort?: 'name' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
    };
    url: '/lpg-injectors/{id}';
};

export type LpgInjectorGetLpgInjectorsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgInjectorGetLpgInjectorsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgInjectorGetLpgInjectorsByIdResponse = LpgInjectorGetLpgInjectorsByIdResponses[keyof LpgInjectorGetLpgInjectorsByIdResponses];

export type LpgInjectorPutLpgInjectorsByIdData = {
    body?: {
        data: {
            /**
             * A string field
             */
            name?: string;
            /**
             * A datetime field
             */
            publishedAt?: string;
            /**
             * A relational field
             */
            lpg_brand?: string;
            /**
             * A relational field
             */
            installations?: Array<string>;
        };
    };
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
    };
    url: '/lpg-injectors/{id}';
};

export type LpgInjectorPutLpgInjectorsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgInjectorPutLpgInjectorsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgInjectorPutLpgInjectorsByIdResponse = LpgInjectorPutLpgInjectorsByIdResponses[keyof LpgInjectorPutLpgInjectorsByIdResponses];

export type LpgReducerGetLpgReducersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        _q?: string;
        /**
         * Pagination parameters
         */
        pagination?: {
            /**
             * Include total count in response
             */
            withCount?: boolean;
        } & ({
            /**
             * Page number (1-based)
             */
            page: number;
            /**
             * Number of entries per page
             */
            pageSize: number;
        } | {
            /**
             * Number of entries to skip
             */
            start: number;
            /**
             * Maximum number of entries to return
             */
            limit: number;
        });
        /**
         * Sort the result
         */
        sort?: 'name' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
    };
    url: '/lpg-reducers';
};

export type LpgReducerGetLpgReducersErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgReducerGetLpgReducersResponses = {
    /**
     * OK
     */
    200: {
        data: Array<{
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        }>;
    };
};

export type LpgReducerGetLpgReducersResponse = LpgReducerGetLpgReducersResponses[keyof LpgReducerGetLpgReducersResponses];

export type LpgReducerPostLpgReducersData = {
    body?: {
        data: {
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: string;
            /**
             * A relational field
             */
            installations?: Array<string>;
        };
    };
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
    };
    url: '/lpg-reducers';
};

export type LpgReducerPostLpgReducersErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgReducerPostLpgReducersResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgReducerPostLpgReducersResponse = LpgReducerPostLpgReducersResponses[keyof LpgReducerPostLpgReducersResponses];

export type LpgReducerDeleteLpgReducersByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
    };
    url: '/lpg-reducers/{id}';
};

export type LpgReducerDeleteLpgReducersByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgReducerDeleteLpgReducersByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgReducerDeleteLpgReducersByIdResponse = LpgReducerDeleteLpgReducersByIdResponses[keyof LpgReducerDeleteLpgReducersByIdResponses];

export type LpgReducerGetLpgReducersByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort the result
         */
        sort?: 'name' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
    };
    url: '/lpg-reducers/{id}';
};

export type LpgReducerGetLpgReducersByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgReducerGetLpgReducersByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgReducerGetLpgReducersByIdResponse = LpgReducerGetLpgReducersByIdResponses[keyof LpgReducerGetLpgReducersByIdResponses];

export type LpgReducerPutLpgReducersByIdData = {
    body?: {
        data: {
            /**
             * A string field
             */
            name?: string;
            /**
             * A datetime field
             */
            publishedAt?: string;
            /**
             * A relational field
             */
            lpg_brand?: string;
            /**
             * A relational field
             */
            installations?: Array<string>;
        };
    };
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
    };
    url: '/lpg-reducers/{id}';
};

export type LpgReducerPutLpgReducersByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgReducerPutLpgReducersByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgReducerPutLpgReducersByIdResponse = LpgReducerPutLpgReducersByIdResponses[keyof LpgReducerPutLpgReducersByIdResponses];

export type LpgTankGetLpgTanksData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'volume' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        _q?: string;
        /**
         * Pagination parameters
         */
        pagination?: {
            /**
             * Include total count in response
             */
            withCount?: boolean;
        } & ({
            /**
             * Page number (1-based)
             */
            page: number;
            /**
             * Number of entries per page
             */
            pageSize: number;
        } | {
            /**
             * Number of entries to skip
             */
            start: number;
            /**
             * Maximum number of entries to return
             */
            limit: number;
        });
        /**
         * Sort the result
         */
        sort?: 'volume' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'volume' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
    };
    url: '/lpg-tanks';
};

export type LpgTankGetLpgTanksErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgTankGetLpgTanksResponses = {
    /**
     * OK
     */
    200: {
        data: Array<{
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * An integer field
             */
            volume: number;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        }>;
    };
};

export type LpgTankGetLpgTanksResponse = LpgTankGetLpgTanksResponses[keyof LpgTankGetLpgTanksResponses];

export type LpgTankPostLpgTanksData = {
    body?: {
        data: {
            /**
             * A float field
             */
            volume: number;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: string;
            /**
             * A relational field
             */
            installations?: Array<string>;
        };
    };
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'volume' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
    };
    url: '/lpg-tanks';
};

export type LpgTankPostLpgTanksErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgTankPostLpgTanksResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * An integer field
             */
            volume: number;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgTankPostLpgTanksResponse = LpgTankPostLpgTanksResponses[keyof LpgTankPostLpgTanksResponses];

export type LpgTankDeleteLpgTanksByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'volume' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
    };
    url: '/lpg-tanks/{id}';
};

export type LpgTankDeleteLpgTanksByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgTankDeleteLpgTanksByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * An integer field
             */
            volume: number;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgTankDeleteLpgTanksByIdResponse = LpgTankDeleteLpgTanksByIdResponses[keyof LpgTankDeleteLpgTanksByIdResponses];

export type LpgTankGetLpgTanksByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'volume' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort the result
         */
        sort?: 'volume' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'volume' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
    };
    url: '/lpg-tanks/{id}';
};

export type LpgTankGetLpgTanksByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgTankGetLpgTanksByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * An integer field
             */
            volume: number;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgTankGetLpgTanksByIdResponse = LpgTankGetLpgTanksByIdResponses[keyof LpgTankGetLpgTanksByIdResponses];

export type LpgTankPutLpgTanksByIdData = {
    body?: {
        data: {
            /**
             * A float field
             */
            volume?: number;
            /**
             * A datetime field
             */
            publishedAt?: string;
            /**
             * A relational field
             */
            lpg_brand?: string;
            /**
             * A relational field
             */
            installations?: Array<string>;
        };
    };
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'volume' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'lpg_brand' | 'installations' | Array<'lpg_brand' | 'installations'>;
    };
    url: '/lpg-tanks/{id}';
};

export type LpgTankPutLpgTanksByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type LpgTankPutLpgTanksByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * An integer field
             */
            volume: number;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            lpg_brand?: ApiLpgBrandLpgBrandDocument;
            /**
             * A relational field
             */
            installations?: Array<ApiInstallationInstallationDocument>;
        };
    };
};

export type LpgTankPutLpgTanksByIdResponse = LpgTankPutLpgTanksByIdResponses[keyof LpgTankPutLpgTanksByIdResponses];

export type ModelGetModelsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        _q?: string;
        /**
         * Pagination parameters
         */
        pagination?: {
            /**
             * Include total count in response
             */
            withCount?: boolean;
        } & ({
            /**
             * Page number (1-based)
             */
            page: number;
            /**
             * Number of entries per page
             */
            pageSize: number;
        } | {
            /**
             * Number of entries to skip
             */
            start: number;
            /**
             * Maximum number of entries to return
             */
            limit: number;
        });
        /**
         * Sort the result
         */
        sort?: 'name' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
        populate?: '*' | 'brand' | 'cars' | Array<'brand' | 'cars'>;
    };
    url: '/models';
};

export type ModelGetModelsErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type ModelGetModelsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<{
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            brand?: ApiBrandBrandDocument;
            /**
             * A relational field
             */
            cars?: Array<ApiCarCarDocument>;
        }>;
    };
};

export type ModelGetModelsResponse = ModelGetModelsResponses[keyof ModelGetModelsResponses];

export type ModelPostModelsData = {
    body?: {
        data: {
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            brand?: string;
            /**
             * A relational field
             */
            cars?: Array<string>;
        };
    };
    path?: never;
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'brand' | 'cars' | Array<'brand' | 'cars'>;
    };
    url: '/models';
};

export type ModelPostModelsErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type ModelPostModelsResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            brand?: ApiBrandBrandDocument;
            /**
             * A relational field
             */
            cars?: Array<ApiCarCarDocument>;
        };
    };
};

export type ModelPostModelsResponse = ModelPostModelsResponses[keyof ModelPostModelsResponses];

export type ModelDeleteModelsByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'brand' | 'cars' | Array<'brand' | 'cars'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
    };
    url: '/models/{id}';
};

export type ModelDeleteModelsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type ModelDeleteModelsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            brand?: ApiBrandBrandDocument;
            /**
             * A relational field
             */
            cars?: Array<ApiCarCarDocument>;
        };
    };
};

export type ModelDeleteModelsByIdResponse = ModelDeleteModelsByIdResponses[keyof ModelDeleteModelsByIdResponses];

export type ModelGetModelsByIdData = {
    body?: never;
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'brand' | 'cars' | Array<'brand' | 'cars'>;
        /**
         * Filters to apply to the query
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort the result
         */
        sort?: 'name' | 'createdAt' | 'updatedAt' | 'publishedAt' | Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
    };
    url: '/models/{id}';
};

export type ModelGetModelsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type ModelGetModelsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            brand?: ApiBrandBrandDocument;
            /**
             * A relational field
             */
            cars?: Array<ApiCarCarDocument>;
        };
    };
};

export type ModelGetModelsByIdResponse = ModelGetModelsByIdResponses[keyof ModelGetModelsByIdResponses];

export type ModelPutModelsByIdData = {
    body?: {
        data: {
            /**
             * A string field
             */
            name?: string;
            /**
             * A datetime field
             */
            publishedAt?: string;
            /**
             * A relational field
             */
            brand?: string;
            /**
             * A relational field
             */
            cars?: Array<string>;
        };
    };
    path: {
        /**
         * The document ID, represented by a UUID
         */
        id: string;
    };
    query?: {
        /**
         * The fields to return, this doesn't include populatable fields like relations, components, files, or dynamic zones
         */
        readonly fields?: Array<'name' | 'createdAt' | 'updatedAt' | 'publishedAt'>;
        populate?: '*' | 'brand' | 'cars' | Array<'brand' | 'cars'>;
    };
    url: '/models/{id}';
};

export type ModelPutModelsByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type ModelPutModelsByIdResponses = {
    /**
     * OK
     */
    200: {
        data: {
            /**
             * The document ID, represented by a UUID
             */
            documentId: string;
            id: number;
            /**
             * A string field
             */
            name: string;
            /**
             * A datetime field
             */
            createdAt?: string;
            /**
             * A datetime field
             */
            updatedAt?: string;
            /**
             * A datetime field
             */
            publishedAt: string;
            /**
             * A relational field
             */
            brand?: ApiBrandBrandDocument;
            /**
             * A relational field
             */
            cars?: Array<ApiCarCarDocument>;
        };
    };
};

export type ModelPutModelsByIdResponse = ModelPutModelsByIdResponses[keyof ModelPutModelsByIdResponses];

export type ContentTypeBuilderGetContentTypesData = {
    body?: never;
    path?: never;
    query: {
        kind: 'collectionType' | 'singleType';
    };
    url: '/content-types';
};

export type ContentTypeBuilderGetContentTypesErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type ContentTypeBuilderGetContentTypesResponses = {
    /**
     * OK
     */
    200: {
        data: Array<{
            uid: string;
            plugin?: string;
            apiID: string;
            schema: {
                displayName: string;
                singularName: string;
                pluralName: string;
                description: string;
                draftAndPublish: boolean;
                kind: 'collectionType' | 'singleType';
                collectionName?: string;
                attributes: {
                    [key: string]: {
                        type: 'media';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        multiple: boolean;
                        required?: boolean;
                        allowedTypes?: Array<string>;
                    } | {
                        type: 'relation';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        relation: string;
                        target: string;
                        targetAttribute: string | null;
                        autoPopulate?: boolean;
                        mappedBy?: string;
                        inversedBy?: string;
                    } | {
                        type: 'component';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        component: string;
                        repeatable: boolean;
                        required?: boolean;
                        min?: number;
                        max?: number;
                    } | {
                        type: 'dynamiczone';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        components: Array<string>;
                        required?: boolean;
                        min?: number;
                        max?: number;
                    } | {
                        type: 'uid';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        targetField?: string;
                    } | {
                        type: string;
                        required?: boolean;
                        unique?: boolean;
                        default?: unknown;
                        min?: number | string;
                        max?: number | string;
                        minLength?: number;
                        maxLength?: number;
                        enum?: Array<string>;
                        regex?: string;
                        private?: boolean;
                        configurable?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                    };
                };
                visible: boolean;
                restrictRelationsTo: Array<string> | null;
                pluginOptions?: {
                    [key: string]: unknown;
                };
                options?: {
                    [key: string]: unknown;
                };
                reviewWorkflows?: boolean;
                populateCreatorFields?: boolean;
                comment?: string;
                version?: string;
            };
        }>;
    };
};

export type ContentTypeBuilderGetContentTypesResponse = ContentTypeBuilderGetContentTypesResponses[keyof ContentTypeBuilderGetContentTypesResponses];

export type ContentTypeBuilderGetContentTypesByUidData = {
    body?: never;
    path: {
        uid: string;
    };
    query?: never;
    url: '/content-types/{uid}';
};

export type ContentTypeBuilderGetContentTypesByUidErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type ContentTypeBuilderGetContentTypesByUidResponses = {
    /**
     * OK
     */
    200: {
        data: {
            uid: string;
            plugin?: string;
            apiID: string;
            schema: {
                displayName: string;
                singularName: string;
                pluralName: string;
                description: string;
                draftAndPublish: boolean;
                kind: 'collectionType' | 'singleType';
                collectionName?: string;
                attributes: {
                    [key: string]: {
                        type: 'media';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        multiple: boolean;
                        required?: boolean;
                        allowedTypes?: Array<string>;
                    } | {
                        type: 'relation';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        relation: string;
                        target: string;
                        targetAttribute: string | null;
                        autoPopulate?: boolean;
                        mappedBy?: string;
                        inversedBy?: string;
                    } | {
                        type: 'component';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        component: string;
                        repeatable: boolean;
                        required?: boolean;
                        min?: number;
                        max?: number;
                    } | {
                        type: 'dynamiczone';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        components: Array<string>;
                        required?: boolean;
                        min?: number;
                        max?: number;
                    } | {
                        type: 'uid';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        targetField?: string;
                    } | {
                        type: string;
                        required?: boolean;
                        unique?: boolean;
                        default?: unknown;
                        min?: number | string;
                        max?: number | string;
                        minLength?: number;
                        maxLength?: number;
                        enum?: Array<string>;
                        regex?: string;
                        private?: boolean;
                        configurable?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                    };
                };
                visible: boolean;
                restrictRelationsTo: Array<string> | null;
                pluginOptions?: {
                    [key: string]: unknown;
                };
                options?: {
                    [key: string]: unknown;
                };
                reviewWorkflows?: boolean;
                populateCreatorFields?: boolean;
                comment?: string;
                version?: string;
            };
        };
    };
};

export type ContentTypeBuilderGetContentTypesByUidResponse = ContentTypeBuilderGetContentTypesByUidResponses[keyof ContentTypeBuilderGetContentTypesByUidResponses];

export type ContentTypeBuilderGetComponentsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/components';
};

export type ContentTypeBuilderGetComponentsErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type ContentTypeBuilderGetComponentsResponses = {
    /**
     * OK
     */
    200: {
        data: Array<{
            uid: string;
            category: string;
            apiId: string;
            schema: {
                displayName: string;
                description: string;
                icon?: string;
                connection?: string;
                collectionName?: string;
                attributes: {
                    [key: string]: {
                        type: 'media';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        multiple: boolean;
                        required?: boolean;
                        allowedTypes?: Array<string>;
                    } | {
                        type: 'relation';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        relation: string;
                        target: string;
                        targetAttribute: string | null;
                        autoPopulate?: boolean;
                        mappedBy?: string;
                        inversedBy?: string;
                    } | {
                        type: 'component';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        component: string;
                        repeatable: boolean;
                        required?: boolean;
                        min?: number;
                        max?: number;
                    } | {
                        type: 'dynamiczone';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        components: Array<string>;
                        required?: boolean;
                        min?: number;
                        max?: number;
                    } | {
                        type: 'uid';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        targetField?: string;
                    } | {
                        type: string;
                        required?: boolean;
                        unique?: boolean;
                        default?: unknown;
                        min?: number | string;
                        max?: number | string;
                        minLength?: number;
                        maxLength?: number;
                        enum?: Array<string>;
                        regex?: string;
                        private?: boolean;
                        configurable?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                    };
                };
                pluginOptions?: {
                    [key: string]: unknown;
                };
            };
        }>;
    };
};

export type ContentTypeBuilderGetComponentsResponse = ContentTypeBuilderGetComponentsResponses[keyof ContentTypeBuilderGetComponentsResponses];

export type ContentTypeBuilderGetComponentsByUidData = {
    body?: never;
    path: {
        uid: string;
    };
    query?: never;
    url: '/components/{uid}';
};

export type ContentTypeBuilderGetComponentsByUidErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type ContentTypeBuilderGetComponentsByUidResponses = {
    /**
     * OK
     */
    200: {
        data: {
            uid: string;
            category: string;
            apiId: string;
            schema: {
                displayName: string;
                description: string;
                icon?: string;
                connection?: string;
                collectionName?: string;
                attributes: {
                    [key: string]: {
                        type: 'media';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        multiple: boolean;
                        required?: boolean;
                        allowedTypes?: Array<string>;
                    } | {
                        type: 'relation';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        relation: string;
                        target: string;
                        targetAttribute: string | null;
                        autoPopulate?: boolean;
                        mappedBy?: string;
                        inversedBy?: string;
                    } | {
                        type: 'component';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        component: string;
                        repeatable: boolean;
                        required?: boolean;
                        min?: number;
                        max?: number;
                    } | {
                        type: 'dynamiczone';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        components: Array<string>;
                        required?: boolean;
                        min?: number;
                        max?: number;
                    } | {
                        type: 'uid';
                        configurable?: false;
                        private?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                        targetField?: string;
                    } | {
                        type: string;
                        required?: boolean;
                        unique?: boolean;
                        default?: unknown;
                        min?: number | string;
                        max?: number | string;
                        minLength?: number;
                        maxLength?: number;
                        enum?: Array<string>;
                        regex?: string;
                        private?: boolean;
                        configurable?: boolean;
                        pluginOptions?: {
                            [key: string]: unknown;
                        };
                    };
                };
                pluginOptions?: {
                    [key: string]: unknown;
                };
            };
        };
    };
};

export type ContentTypeBuilderGetComponentsByUidResponse = ContentTypeBuilderGetComponentsByUidResponses[keyof ContentTypeBuilderGetComponentsByUidResponses];

export type UploadPostData = {
    body?: never;
    path?: never;
    query?: {
        id?: number;
    };
    url: '/';
};

export type UploadPostErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UploadPostResponses = {
    /**
     * OK
     */
    200: {
        id: number;
        documentId: string;
        name: string;
        alternativeText?: string | null;
        caption?: string | null;
        width?: number;
        height?: number;
        formats?: {
            [key: string]: unknown;
        };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string | null;
        folder?: number;
        folderPath: string;
        provider: string;
        provider_metadata?: {
            [key: string]: unknown;
        } | null;
        createdAt: string;
        updatedAt: string;
        createdBy?: number;
        updatedBy?: number;
    } | Array<{
        id: number;
        documentId: string;
        name: string;
        alternativeText?: string | null;
        caption?: string | null;
        width?: number;
        height?: number;
        formats?: {
            [key: string]: unknown;
        };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string | null;
        folder?: number;
        folderPath: string;
        provider: string;
        provider_metadata?: {
            [key: string]: unknown;
        } | null;
        createdAt: string;
        updatedAt: string;
        createdBy?: number;
        updatedBy?: number;
    }>;
};

export type UploadPostResponse = UploadPostResponses[keyof UploadPostResponses];

export type UploadGetFilesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Select specific fields to return in the response
         */
        fields?: string | Array<string>;
        /**
         * Specify which relations to populate in the response
         */
        populate?: '*' | string | Array<string> | {
            [key: string]: unknown;
        };
        /**
         * Sort the results by specified fields
         */
        sort?: string | Array<string> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
        /**
         * Pagination parameters
         */
        pagination?: {
            /**
             * Include total count in response
             */
            withCount?: boolean;
        } & ({
            /**
             * Page number (1-based)
             */
            page: number;
            /**
             * Number of entries per page
             */
            pageSize: number;
        } | {
            /**
             * Number of entries to skip
             */
            start: number;
            /**
             * Maximum number of entries to return
             */
            limit: number;
        });
        /**
         * Apply filters to the query
         */
        filters?: {
            [key: string]: unknown;
        };
    };
    url: '/files';
};

export type UploadGetFilesErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UploadGetFilesResponses = {
    /**
     * OK
     */
    200: Array<{
        id: number;
        documentId: string;
        name: string;
        alternativeText?: string | null;
        caption?: string | null;
        width?: number;
        height?: number;
        formats?: {
            [key: string]: unknown;
        };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string | null;
        folder?: number;
        folderPath: string;
        provider: string;
        provider_metadata?: {
            [key: string]: unknown;
        } | null;
        createdAt: string;
        updatedAt: string;
        createdBy?: number;
        updatedBy?: number;
    }>;
};

export type UploadGetFilesResponse = UploadGetFilesResponses[keyof UploadGetFilesResponses];

export type UploadDeleteFilesByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/files/{id}';
};

export type UploadDeleteFilesByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UploadDeleteFilesByIdResponses = {
    /**
     * OK
     */
    200: {
        id: number;
        documentId: string;
        name: string;
        alternativeText?: string | null;
        caption?: string | null;
        width?: number;
        height?: number;
        formats?: {
            [key: string]: unknown;
        };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string | null;
        folder?: number;
        folderPath: string;
        provider: string;
        provider_metadata?: {
            [key: string]: unknown;
        } | null;
        createdAt: string;
        updatedAt: string;
        createdBy?: number;
        updatedBy?: number;
    };
};

export type UploadDeleteFilesByIdResponse = UploadDeleteFilesByIdResponses[keyof UploadDeleteFilesByIdResponses];

export type UploadGetFilesByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: {
        /**
         * Select specific fields to return in the response
         */
        fields?: string | Array<string>;
        /**
         * Specify which relations to populate in the response
         */
        populate?: '*' | string | Array<string> | {
            [key: string]: unknown;
        };
    };
    url: '/files/{id}';
};

export type UploadGetFilesByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UploadGetFilesByIdResponses = {
    /**
     * OK
     */
    200: {
        id: number;
        documentId: string;
        name: string;
        alternativeText?: string | null;
        caption?: string | null;
        width?: number;
        height?: number;
        formats?: {
            [key: string]: unknown;
        };
        hash: string;
        ext?: string;
        mime: string;
        size: number;
        url: string;
        previewUrl?: string | null;
        folder?: number;
        folderPath: string;
        provider: string;
        provider_metadata?: {
            [key: string]: unknown;
        } | null;
        createdAt: string;
        updatedAt: string;
        createdBy?: number;
        updatedBy?: number;
    };
};

export type UploadGetFilesByIdResponse = UploadGetFilesByIdResponses[keyof UploadGetFilesByIdResponses];

export type I18nGetLocalesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/locales';
};

export type I18nGetLocalesErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type I18nGetLocalesResponses = {
    /**
     * OK
     */
    200: Array<{
        id: number;
        documentId: string;
        name: string;
        code: string;
        createdAt: string;
        updatedAt: string;
        publishedAt: string | null;
        isDefault: boolean;
    }>;
};

export type I18nGetLocalesResponse = I18nGetLocalesResponses[keyof I18nGetLocalesResponses];

export type UsersPermissionsGetConnectData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/connect/(.*)';
};

export type UsersPermissionsGetConnectErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsPostAuthLocalData = {
    body?: {
        identifier: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/auth/local';
};

export type UsersPermissionsPostAuthLocalErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsPostAuthLocalResponses = {
    /**
     * OK
     */
    200: {
        jwt: string;
        refreshToken?: string;
        user: {
            id: number;
            documentId: string;
            username: string;
            email: string;
            provider: string;
            confirmed: boolean;
            blocked: boolean;
            role?: number | {
                id: number;
                name: string;
                description: string | null;
                type: string;
                createdAt: string;
                updatedAt: string;
            };
            createdAt: string;
            updatedAt: string;
            publishedAt: string;
        };
    };
};

export type UsersPermissionsPostAuthLocalResponse = UsersPermissionsPostAuthLocalResponses[keyof UsersPermissionsPostAuthLocalResponses];

export type UsersPermissionsPostAuthLocalRegisterData = {
    body?: {
        username: string;
        email: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/auth/local/register';
};

export type UsersPermissionsPostAuthLocalRegisterErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsPostAuthLocalRegisterResponses = {
    /**
     * OK
     */
    200: {
        jwt: string;
        refreshToken?: string;
        user: {
            id: number;
            documentId: string;
            username: string;
            email: string;
            provider: string;
            confirmed: boolean;
            blocked: boolean;
            role?: number | {
                id: number;
                name: string;
                description: string | null;
                type: string;
                createdAt: string;
                updatedAt: string;
            };
            createdAt: string;
            updatedAt: string;
            publishedAt: string;
        };
    } | {
        user: {
            id: number;
            documentId: string;
            username: string;
            email: string;
            provider: string;
            confirmed: boolean;
            blocked: boolean;
            role?: number | {
                id: number;
                name: string;
                description: string | null;
                type: string;
                createdAt: string;
                updatedAt: string;
            };
            createdAt: string;
            updatedAt: string;
            publishedAt: string;
        };
    };
};

export type UsersPermissionsPostAuthLocalRegisterResponse = UsersPermissionsPostAuthLocalRegisterResponses[keyof UsersPermissionsPostAuthLocalRegisterResponses];

export type UsersPermissionsGetAuthByProviderCallbackData = {
    body?: never;
    path: {
        provider: string;
    };
    query?: never;
    url: '/auth/{provider}/callback';
};

export type UsersPermissionsGetAuthByProviderCallbackErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsGetAuthByProviderCallbackResponses = {
    /**
     * OK
     */
    200: {
        jwt: string;
        refreshToken?: string;
        user: {
            id: number;
            documentId: string;
            username: string;
            email: string;
            provider: string;
            confirmed: boolean;
            blocked: boolean;
            role?: number | {
                id: number;
                name: string;
                description: string | null;
                type: string;
                createdAt: string;
                updatedAt: string;
            };
            createdAt: string;
            updatedAt: string;
            publishedAt: string;
        };
    };
};

export type UsersPermissionsGetAuthByProviderCallbackResponse = UsersPermissionsGetAuthByProviderCallbackResponses[keyof UsersPermissionsGetAuthByProviderCallbackResponses];

export type UsersPermissionsPostAuthForgotPasswordData = {
    body?: {
        email: string;
    };
    path?: never;
    query?: never;
    url: '/auth/forgot-password';
};

export type UsersPermissionsPostAuthForgotPasswordErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsPostAuthForgotPasswordResponses = {
    /**
     * OK
     */
    200: {
        ok: boolean;
    };
};

export type UsersPermissionsPostAuthForgotPasswordResponse = UsersPermissionsPostAuthForgotPasswordResponses[keyof UsersPermissionsPostAuthForgotPasswordResponses];

export type UsersPermissionsPostAuthResetPasswordData = {
    body?: {
        code: string;
        password: string;
        passwordConfirmation: string;
    };
    path?: never;
    query?: never;
    url: '/auth/reset-password';
};

export type UsersPermissionsPostAuthResetPasswordErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsPostAuthResetPasswordResponses = {
    /**
     * OK
     */
    200: {
        jwt: string;
        refreshToken?: string;
        user: {
            id: number;
            documentId: string;
            username: string;
            email: string;
            provider: string;
            confirmed: boolean;
            blocked: boolean;
            role?: number | {
                id: number;
                name: string;
                description: string | null;
                type: string;
                createdAt: string;
                updatedAt: string;
            };
            createdAt: string;
            updatedAt: string;
            publishedAt: string;
        };
    };
};

export type UsersPermissionsPostAuthResetPasswordResponse = UsersPermissionsPostAuthResetPasswordResponses[keyof UsersPermissionsPostAuthResetPasswordResponses];

export type UsersPermissionsGetAuthEmailConfirmationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/email-confirmation';
};

export type UsersPermissionsGetAuthEmailConfirmationErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsPostAuthSendEmailConfirmationData = {
    body?: {
        email: string;
    };
    path?: never;
    query?: never;
    url: '/auth/send-email-confirmation';
};

export type UsersPermissionsPostAuthSendEmailConfirmationErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsPostAuthSendEmailConfirmationResponses = {
    /**
     * OK
     */
    200: {
        email: string;
        sent: boolean;
    };
};

export type UsersPermissionsPostAuthSendEmailConfirmationResponse = UsersPermissionsPostAuthSendEmailConfirmationResponses[keyof UsersPermissionsPostAuthSendEmailConfirmationResponses];

export type UsersPermissionsPostAuthChangePasswordData = {
    body?: {
        currentPassword: string;
        password: string;
        passwordConfirmation: string;
    };
    path?: never;
    query?: never;
    url: '/auth/change-password';
};

export type UsersPermissionsPostAuthChangePasswordErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsPostAuthChangePasswordResponses = {
    /**
     * OK
     */
    200: {
        jwt: string;
        refreshToken?: string;
        user: {
            id: number;
            documentId: string;
            username: string;
            email: string;
            provider: string;
            confirmed: boolean;
            blocked: boolean;
            role?: number | {
                id: number;
                name: string;
                description: string | null;
                type: string;
                createdAt: string;
                updatedAt: string;
            };
            createdAt: string;
            updatedAt: string;
            publishedAt: string;
        };
    };
};

export type UsersPermissionsPostAuthChangePasswordResponse = UsersPermissionsPostAuthChangePasswordResponses[keyof UsersPermissionsPostAuthChangePasswordResponses];

export type UsersPermissionsPostAuthRefreshData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type UsersPermissionsPostAuthRefreshErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsPostAuthLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/logout';
};

export type UsersPermissionsPostAuthLogoutErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsGetUsersCountData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Apply filters to the query
         */
        filters?: {
            [key: string]: unknown;
        };
    };
    url: '/users/count';
};

export type UsersPermissionsGetUsersCountErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsGetUsersCountResponses = {
    /**
     * OK
     */
    200: number;
};

export type UsersPermissionsGetUsersCountResponse = UsersPermissionsGetUsersCountResponses[keyof UsersPermissionsGetUsersCountResponses];

export type UsersPermissionsGetUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Select specific fields to return in the response
         */
        fields?: string | Array<string>;
        /**
         * Specify which relations to populate in the response
         */
        populate?: '*' | string | Array<string> | {
            [key: string]: unknown;
        };
        /**
         * Sort the results by specified fields
         */
        sort?: string | Array<string> | {
            [key: string]: 'asc' | 'desc';
        } | Array<{
            [key: string]: 'asc' | 'desc';
        }>;
        /**
         * Pagination parameters
         */
        pagination?: {
            /**
             * Include total count in response
             */
            withCount?: boolean;
        } & ({
            /**
             * Page number (1-based)
             */
            page: number;
            /**
             * Number of entries per page
             */
            pageSize: number;
        } | {
            /**
             * Number of entries to skip
             */
            start: number;
            /**
             * Maximum number of entries to return
             */
            limit: number;
        });
        /**
         * Apply filters to the query
         */
        filters?: {
            [key: string]: unknown;
        };
    };
    url: '/users';
};

export type UsersPermissionsGetUsersErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsGetUsersResponses = {
    /**
     * OK
     */
    200: Array<{
        id: number;
        documentId: string;
        username: string;
        email: string;
        provider: string;
        confirmed: boolean;
        blocked: boolean;
        role?: number | {
            id: number;
            name: string;
            description: string | null;
            type: string;
            createdAt: string;
            updatedAt: string;
        };
        createdAt: string;
        updatedAt: string;
        publishedAt: string;
    }>;
};

export type UsersPermissionsGetUsersResponse = UsersPermissionsGetUsersResponses[keyof UsersPermissionsGetUsersResponses];

export type UsersPermissionsPostUsersData = {
    body?: {
        username: string;
        email: string;
        password: string;
        role?: number;
    };
    path?: never;
    query?: never;
    url: '/users';
};

export type UsersPermissionsPostUsersErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsPostUsersResponses = {
    /**
     * OK
     */
    200: {
        id: number;
        documentId: string;
        username: string;
        email: string;
        provider: string;
        confirmed: boolean;
        blocked: boolean;
        role?: number | {
            id: number;
            name: string;
            description: string | null;
            type: string;
            createdAt: string;
            updatedAt: string;
        };
        createdAt: string;
        updatedAt: string;
        publishedAt: string;
    };
};

export type UsersPermissionsPostUsersResponse = UsersPermissionsPostUsersResponses[keyof UsersPermissionsPostUsersResponses];

export type UsersPermissionsGetUsersMeData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Select specific fields to return in the response
         */
        fields?: string | Array<string>;
        /**
         * Specify which relations to populate in the response
         */
        populate?: '*' | string | Array<string> | {
            [key: string]: unknown;
        };
    };
    url: '/users/me';
};

export type UsersPermissionsGetUsersMeErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsGetUsersMeResponses = {
    /**
     * OK
     */
    200: {
        id: number;
        documentId: string;
        username: string;
        email: string;
        provider: string;
        confirmed: boolean;
        blocked: boolean;
        role?: number | {
            id: number;
            name: string;
            description: string | null;
            type: string;
            createdAt: string;
            updatedAt: string;
        };
        createdAt: string;
        updatedAt: string;
        publishedAt: string;
    };
};

export type UsersPermissionsGetUsersMeResponse = UsersPermissionsGetUsersMeResponses[keyof UsersPermissionsGetUsersMeResponses];

export type UsersPermissionsDeleteUsersByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type UsersPermissionsDeleteUsersByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsDeleteUsersByIdResponses = {
    /**
     * OK
     */
    200: {
        id: number;
        documentId: string;
        username: string;
        email: string;
        provider: string;
        confirmed: boolean;
        blocked: boolean;
        role?: number | {
            id: number;
            name: string;
            description: string | null;
            type: string;
            createdAt: string;
            updatedAt: string;
        };
        createdAt: string;
        updatedAt: string;
        publishedAt: string;
    };
};

export type UsersPermissionsDeleteUsersByIdResponse = UsersPermissionsDeleteUsersByIdResponses[keyof UsersPermissionsDeleteUsersByIdResponses];

export type UsersPermissionsGetUsersByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        /**
         * Select specific fields to return in the response
         */
        fields?: string | Array<string>;
        /**
         * Specify which relations to populate in the response
         */
        populate?: '*' | string | Array<string> | {
            [key: string]: unknown;
        };
    };
    url: '/users/{id}';
};

export type UsersPermissionsGetUsersByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsGetUsersByIdResponses = {
    /**
     * OK
     */
    200: {
        id: number;
        documentId: string;
        username: string;
        email: string;
        provider: string;
        confirmed: boolean;
        blocked: boolean;
        role?: number | {
            id: number;
            name: string;
            description: string | null;
            type: string;
            createdAt: string;
            updatedAt: string;
        };
        createdAt: string;
        updatedAt: string;
        publishedAt: string;
    };
};

export type UsersPermissionsGetUsersByIdResponse = UsersPermissionsGetUsersByIdResponses[keyof UsersPermissionsGetUsersByIdResponses];

export type UsersPermissionsPutUsersByIdData = {
    body?: {
        username?: string;
        email?: string;
        password?: string;
        role?: number;
    };
    path: {
        id: string;
    };
    query?: never;
    url: '/users/{id}';
};

export type UsersPermissionsPutUsersByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsPutUsersByIdResponses = {
    /**
     * OK
     */
    200: {
        id: number;
        documentId: string;
        username: string;
        email: string;
        provider: string;
        confirmed: boolean;
        blocked: boolean;
        role?: number | {
            id: number;
            name: string;
            description: string | null;
            type: string;
            createdAt: string;
            updatedAt: string;
        };
        createdAt: string;
        updatedAt: string;
        publishedAt: string;
    };
};

export type UsersPermissionsPutUsersByIdResponse = UsersPermissionsPutUsersByIdResponses[keyof UsersPermissionsPutUsersByIdResponses];

export type UsersPermissionsGetRolesByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/roles/{id}';
};

export type UsersPermissionsGetRolesByIdErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsGetRolesByIdResponses = {
    /**
     * OK
     */
    200: {
        role: {
            id: number;
            documentId: string;
            name: string;
            description: string | null;
            type: string;
            createdAt: string;
            updatedAt: string;
            publishedAt: string;
            nb_users?: number;
            permissions?: {
                [key: string]: {
                    controllers: {
                        [key: string]: {
                            [key: string]: {
                                enabled: boolean;
                                policy: string;
                            };
                        };
                    };
                };
            };
            users?: Array<unknown>;
        };
    };
};

export type UsersPermissionsGetRolesByIdResponse = UsersPermissionsGetRolesByIdResponses[keyof UsersPermissionsGetRolesByIdResponses];

export type UsersPermissionsGetRolesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/roles';
};

export type UsersPermissionsGetRolesErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsGetRolesResponses = {
    /**
     * OK
     */
    200: {
        roles: Array<{
            id: number;
            documentId: string;
            name: string;
            description: string | null;
            type: string;
            createdAt: string;
            updatedAt: string;
            publishedAt: string;
            nb_users?: number;
            permissions?: {
                [key: string]: {
                    controllers: {
                        [key: string]: {
                            [key: string]: {
                                enabled: boolean;
                                policy: string;
                            };
                        };
                    };
                };
            };
            users?: Array<unknown>;
        }>;
    };
};

export type UsersPermissionsGetRolesResponse = UsersPermissionsGetRolesResponses[keyof UsersPermissionsGetRolesResponses];

export type UsersPermissionsPostRolesData = {
    body?: {
        name: string;
        description?: string;
        type: string;
        permissions?: {
            [key: string]: unknown;
        };
    };
    path?: never;
    query?: never;
    url: '/roles';
};

export type UsersPermissionsPostRolesErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsPostRolesResponses = {
    /**
     * OK
     */
    200: {
        ok: boolean;
    };
};

export type UsersPermissionsPostRolesResponse = UsersPermissionsPostRolesResponses[keyof UsersPermissionsPostRolesResponses];

export type UsersPermissionsDeleteRolesByRoleData = {
    body?: never;
    path: {
        role: string;
    };
    query?: never;
    url: '/roles/{role}';
};

export type UsersPermissionsDeleteRolesByRoleErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsDeleteRolesByRoleResponses = {
    /**
     * OK
     */
    200: {
        ok: boolean;
    };
};

export type UsersPermissionsDeleteRolesByRoleResponse = UsersPermissionsDeleteRolesByRoleResponses[keyof UsersPermissionsDeleteRolesByRoleResponses];

export type UsersPermissionsPutRolesByRoleData = {
    body?: {
        name?: string;
        description?: string;
        type?: string;
        permissions?: {
            [key: string]: unknown;
        };
    };
    path: {
        role: string;
    };
    query?: never;
    url: '/roles/{role}';
};

export type UsersPermissionsPutRolesByRoleErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsPutRolesByRoleResponses = {
    /**
     * OK
     */
    200: {
        ok: boolean;
    };
};

export type UsersPermissionsPutRolesByRoleResponse = UsersPermissionsPutRolesByRoleResponses[keyof UsersPermissionsPutRolesByRoleResponses];

export type UsersPermissionsGetPermissionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/permissions';
};

export type UsersPermissionsGetPermissionsErrors = {
    /**
     * Bad request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden
     */
    403: unknown;
    /**
     * Not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type UsersPermissionsGetPermissionsResponses = {
    /**
     * OK
     */
    200: {
        permissions: {
            [key: string]: {
                controllers: {
                    [key: string]: {
                        [key: string]: {
                            enabled: boolean;
                            policy: string;
                        };
                    };
                };
            };
        };
    };
};

export type UsersPermissionsGetPermissionsResponse = UsersPermissionsGetPermissionsResponses[keyof UsersPermissionsGetPermissionsResponses];
